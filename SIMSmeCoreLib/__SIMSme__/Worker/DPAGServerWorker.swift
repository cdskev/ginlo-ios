//
//  DPAGServerWorker.swift
//  SIMSmeCore
//
//  Created by RBU on 17.01.18.
//  Copyright Â© 2020 ginlo.net GmbH. All rights reserved.
//

private let kPathDiag = "Diag"
private let PATH_CREATE_ACCOUNT = "CreateAccount"
private let PATH_RECOVER_BACKUP = "RecoveryService"

protocol DPAGServerWorkerProtocol {
    func createAccount(metadata: String, responseBlock: @escaping DPAGServiceResponseBlock) throws
    func createAutomaticAccount(metadata: String, cockpitToken: String, cockpitData: String, responseBlock: @escaping DPAGServiceResponseBlock) throws
    func createDeviceInAccount(accountGuid: String, phoneNumber phone: String?, metadata: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func confirmAccount(code: String, responseBlock: @escaping DPAGServiceResponseBlock)
    func isConfirmationValid(code: String, responseBlock: @escaping DPAGServiceResponseBlock)

    func getServerSalt(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getSimsmeRecoveryPublicKey(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func requestSimsmeRecoveryKey(parameter: [AnyHashable: Any], withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func getKnownAccounts(hashedPhoneNumbers: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getKnownAccounts(hashedAccountSearchAttributes: [String], searchMode: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getKnownAccounts(hashedPhoneNumbers: [String], mandant: DPAGMandant, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws
    func getKnownAccounts(hashedAccountSearchAttributes: [String], searchMode: String, mandant: DPAGMandant, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws

    func getAccountInfo(guid: String, withProfile profile: Bool, withTempDevice tempDevice: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getAccountsInfo(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getAccountImage(guid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func setAutoGenerateConfirmReadMessage(enabled: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getAutoGeneratedMessages(withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func getDevices(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func deleteDevice(guid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func renameDevice(guid: String, newName: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func setContact(contactAccountGuid: String, blocked: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func deleteAccount(withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func isMessageSent(messageGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func setChatDeleted(streamGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func deleteTimedMessage(messageGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func deleteTimedMessages(messageGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func sendMessage(msgInstance: DPAGSendMessageWorkerInstance, concurrent isRequestConcurrent: Bool, requestInBackgroundId: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws
    func sendTimedMessage(msgInstance: DPAGSendMessageWorkerInstance, sendTime: Date, concurrent isRequestConcurrent: Bool, requestInBackgroundId: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws

    func sendInternalMessage(messageJson: String, to: SIMSContactIndexEntry, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws
    func sendInternalMessages(messageJsonsString: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws

    func sendGroupMessage(msgInstance: DPAGSendMessageWorkerInstance, concurrent isRequestConcurrent: Bool, requestInBackgroundId: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws
    func sendTimedGroupMessage(msgInstance: DPAGSendMessageWorkerInstance, sendTime: Date, concurrent isRequestConcurrent: Bool, requestInBackgroundId: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws

    func getNewMessages(withResponse responseBlock: DPAGServiceResponseBlock?, useLazy: Bool) -> URLSessionTask?

    func confirmDownload(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func confirmAttachmentDownload(guids: [String], withResponse responseBlock: DPAGServiceResponseBlock?)
    func confirmRead(guids: [String], chatGuid: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func confirmDeleted(guids: [String], withResponse responseBlock: DPAGServiceResponseBlock?)

    func setDeviceData() throws

    func setNotification(enable: Bool, forChatType type: DPAGNotificationChatType, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setNotificationSound(enable: Bool, forChatType type: DPAGNotificationChatType, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func setChannelNotification(enable: Bool, forChannel channelGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setServiceNotification(enable: Bool, forService serviceGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func setBackgroundPushNotification(enable: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setPreviewPushNotification(enable: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func createGroup(withData roomData: String, addMembersJSON: String?, adminJSON: String?, nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws
    func updateGroup(groupGuid: String, data: String?, keyIV: String?, newMembersJSON: String?, removedMembers: [String], newAdmins: [String], removedAdmins: [String], nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func removeRoom(roomGuid: String, nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getRoom(roomGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func removeMember(accountGuid: String, fromRoom roomGuid: String, nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func acceptInvitationForRoom(roomGuid: String, nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func declineInvitationForRoom(roomGuid: String, nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func sendCrashReport(report: String, withResponse responseBlock: DPAGServiceResponseBlock?)
    func getAttachment(guid: String, progress downloadProgressBlock: DPAGProgressBlock?, destination: @escaping ((_ targetPath: URL?, _ response: URLResponse?) -> URL), withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func isTrackingDisabled(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getConfigVersions(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getConfiguration(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getClientConfiguration(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getCompanyInfo(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getCompanyLayout(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getCompanyLogo(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getCompanyConfig(withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func verifyCompanyEmail(email: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setCompanyRecoveryKey(recoveryKey: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func checkCompanyManagement(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func acceptCompanyManagement(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func declineCompanyManagement(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func requestCompanyRecoveryKey(recoveryKey: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func resetBadge(withResponse response: @escaping DPAGServiceResponseBlock)
    func createBackgroundAccessToken(withResponse response: @escaping DPAGServiceResponseBlock)
    func logEvents(events: [[AnyHashable: Any]])

    func getChannels(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getChannelChecksum(channelGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getChannelDetails(channelGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getChannelDetails(channelGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getChannelAsset(channelGuid: String, assetType: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getChannelAssets(channelAssets: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func subscribeChannel(channelGuid: String, filter: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func unsubscribeChannel(channelGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getChannelCategories(withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func getServices(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getServiceChecksum(serviceGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getServiceDetails(serviceGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getServiceDetails(serviceGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getServiceAsset(serviceGuid: String, assetType: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getServiceAssets(serviceAssetIdents: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func subscribeService(serviceGuid: String, filter: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func unsubscribeService(serviceGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func getInfoPages(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getInfoPageData(pageGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func createBackupPasstoken(accountGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setFollowedChannels(channelInfos: [[AnyHashable: Any]], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setFollowedServices(serviceInfos: [[AnyHashable: Any]], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getBlocked(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getTimedMessageGuids(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getTimedMessages(messageGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getCurrentRoomInfo(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getMandanten(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getPurchasedProducts(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func registerVoucher(voucher: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func registerTestVoucher(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getTestVoucherInfo(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getProducts(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func registerPurchase(productId: String, andTransaction transaction: String?, andReceipt receipt: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func checkMailAddress(eMailAddress: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func validateMailAddress(eMailAddress: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func requestConfirmationMail(eMailAddress: String, force: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func confirmConfirmationMail(code: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func requestConfirmationSMS(phoneNumber: String, force: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func confirmConfirmationSMS(code: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func setAdressInformation(data: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getAdressInformations(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getAdressInformationBatch(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getAdressInformationsCompany(withResponse responseBlock: @escaping DPAGServiceResponseBlock, since dateSince: Date)
    func getAdressInformationsCompanyBatch(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func checkServiceAvailability(serviceID: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func checkServiceAvailability(serviceID: String, zipCode: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func setProfilInfo(nickname: String?, andStatus status: String?, andImage image: String?, oooStatus: String?, toAccounts accountGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func initialiseCoupling(transId: String, timestamp ts: String, tan tan1: String, appData: String, signature sig: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func cancelCoupling(transId: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getAccountInfoAnonymous(data: String, searchMode mode: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func requestCoupling(accountGuid: String, transId transaktionId: String, pubKey publicKey: String, encVrfy verifyData: String, reqType type: String, appData: String, signature sig: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getCouplingRequest(transId: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func responseCoupling(transId: String, device publicKey: String, devKeySig verifyData: String, key aesKey: String, keyIV aesKeyIV: String, encSyncData minibackup: String, appData: String, signature sig: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getCouplingResponse(accountGuid: String, transId transaktionId: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func createAdditionalDevice(accountGuid: String, transId transaktionId: String, device metadata: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func createShareExtensionDevice(accountGuid: String, device metadata: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getMessages(guids: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setDeviceName(guid: String, deviceName deviceNameEncoded: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getTempDeviceInfo(accountGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setTempDeviceInfo(keys: String, createdAt createdAtString: String, nextUpdate nextUpdateString: String, sig signature: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getConfirmedIdentities(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func listPrivateIndexEntries(ifModifiedSince: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getPrivateIndexEntries(guids: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func deletePrivateIndexEntries(guids: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func insUpdPrivateIndex(data: [String: String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func removeConfirmedEmailAddress(withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func removeConfirmedPhoneNumber(withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func requestEncryptionInfo(withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func fetchBackgroundMessage(messageGuid: String, userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping ((_ result: UIBackgroundFetchResult) -> Void))

    func setPublicOnlineState(enabled: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getPublicOnlineState(withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func setIsWriting(accountGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func resetIsWriting(accountGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func getOnlineState(accountGuid: String, lastKnownState: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func getOnlineStateBatch(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func setSilentSingleChat(accountGuid: String, till: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setSilentGroupChat(groupGuid: String, till: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock)

    func handleEvents(forBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void)

    func getAutoAttachment(guid: String, contentType: DPAGMessageContentType, progress downloadProgressBlock: DPAGProgressBlock?, destination: @escaping ((_ targetPath: URL?, _ response: URLResponse?) -> URL), withResponse responseBlock: @escaping DPAGServiceResponseBlock)
    func setBrabblerSwitchState()
}

class DPAGServerWorker: NSObject, DPAGServerWorkerProtocol {
    private let devicesDAO: DevicesDAOProtocol = DevicesDAO()

    @discardableResult
    private func sendCommand(_ command: CodableDict, withResponse responseBlock: DPAGServiceResponseBlock?) -> URLSessionTask? {
        DPAGApplicationFacade.service.perform(request: DPAGHttpServiceRequest(parametersCodable: command, responseBlock: responseBlock))
    }

    func sendCommandAnonymous(_ command: CodableDict, withResponse responseBlock: DPAGServiceResponseBlock?) {
        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequest()

            request.parametersCodable = command
            request.responseBlock = responseBlock
            request.path = PATH_CREATE_ACCOUNT
            request.authenticate = .none

            return request
        }())
    }

    func createAccount(metadata: String, responseBlock: @escaping DPAGServiceResponseBlock) throws {
        let checksum = try CryptoHelperCoding.shared.md5Hash(value: metadata)

        var mandant: String?

        if DPAGApplicationFacade.preferences.isWhiteLabelBuild {
            let ident = DPAGApplicationFacade.preferences.mandantIdent
            mandant = ident ?? ""
        }

        self.sendCommandAnonymous(DPAGServerFunction.CreateAccount(language: DPAGApplicationFacade.model.language ?? "de", data: metadata, dataChecksum: checksum, allowFreeMailer: 1, mandant: mandant), withResponse: responseBlock)
    }

    func createAutomaticAccount(metadata: String, cockpitToken: String, cockpitData: String, responseBlock: @escaping DPAGServiceResponseBlock) throws {
        let checksum = try CryptoHelperCoding.shared.md5Hash(value: metadata)

        var mandant: String?

        if DPAGApplicationFacade.preferences.isWhiteLabelBuild {
            let ident = DPAGApplicationFacade.preferences.mandantIdent
            mandant = ident ?? ""
        }

        self.sendCommandAnonymous(DPAGServerFunction.CreateAutomaticAccount(language: DPAGApplicationFacade.model.language ?? "de", data: metadata, dataChecksum: checksum, cockpitToken: cockpitToken, cockpitData: cockpitData, mandant: mandant), withResponse: responseBlock)
    }

    func createDeviceInAccount(accountGuid _: String, phoneNumber phone: String?, metadata: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        var mandant = DPAGMandant.IDENT_DEFAULT

        if DPAGApplicationFacade.preferences.isWhiteLabelBuild {
            let ident = DPAGApplicationFacade.preferences.mandantIdent
            mandant = ident ?? ""
        }

        let requestPath = PATH_RECOVER_BACKUP

        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequest()
            request.parametersCodable = DPAGServerFunction.CreateDeviceInAccount(phoneNumber: phone, device: metadata, mandant: mandant)
            request.responseBlock = responseBlock
            request.path = requestPath
            request.authenticate = .recovery

            return request
        }())
    }

    func confirmAccount(code: String, responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ConfirmAccount(confirmationCode: code), withResponse: responseBlock)
    }

    func isConfirmationValid(code: String, responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.IsConfirmationValid(confirmationCode: code), withResponse: responseBlock)
    }

    func getServerSalt(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetServerSalt(), withResponse: responseBlock)
    }

    func getSimsmeRecoveryPublicKey(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetSimsmeRecoveryPublicKey(), withResponse: responseBlock)
    }

    func requestSimsmeRecoveryKey(parameter: [AnyHashable: Any], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        let requestPath = "BackgroundService"

        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequest()
            request.parameters = parameter
            request.parametersCodable = DPAGServerFunction.RequestSimsmeRecoveryKey(language: Bundle.main.preferredLocalizations.first ?? "de")
            request.responseBlock = responseBlock
            request.path = requestPath
            request.authenticate = .background

            return request
        }())
    }

    func getKnownAccounts(hashedPhoneNumbers: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.getKnownAccounts(hashedAccountSearchAttributes: hashedPhoneNumbers, searchMode: "phone", withResponse: responseBlock)
    }

    func getKnownAccounts(hashedAccountSearchAttributes: [String], searchMode: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        do {
            let hashedAccountSearchAttributesJson = try hashedAccountSearchAttributes.jsonString()

            self.sendCommand(DPAGServerFunction.GetKnownAccountInfo(data: hashedAccountSearchAttributesJson, profileInfo: "1", mandant: "1", searchMode: searchMode), withResponse: responseBlock)
        } catch {
            responseBlock(nil, nil, error.localizedDescription)
        }
    }

    func getKnownAccounts(hashedPhoneNumbers: [String], mandant: DPAGMandant, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws {
        try self.getKnownAccounts(hashedAccountSearchAttributes: hashedPhoneNumbers, searchMode: "phone", mandant: mandant, withResponse: responseBlock)
    }

    func getKnownAccounts(hashedAccountSearchAttributes: [String], searchMode: String, mandant: DPAGMandant, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws {
        do {
            let hashedAccountSearchAttributesJson = try hashedAccountSearchAttributes.jsonString()
            let checksum = try CryptoHelperCoding.shared.md5Hash(value: hashedAccountSearchAttributesJson)

            self.sendCommand(DPAGServerFunction.GetKnownAccounts(salt: mandant.salt, data: hashedAccountSearchAttributesJson, profileInfo: "1", mandant: mandant.ident, dataChecksum: checksum, searchMode: searchMode), withResponse: responseBlock)
        } catch {
            responseBlock(nil, nil, error.localizedDescription)
        }
    }

    func getAccountInfo(guid: String, withProfile _: Bool, withTempDevice tempDevice: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetAccountInfo(accountGuid: guid, profileInfo: "1", mandant: "1", checkReadonly: (DPAGApplicationFacade.cache.account?.isCompanyUserRestricted ?? false) ? "1" : "0", tempDevice: tempDevice ? "1" : "0"), withResponse: responseBlock)
    }

    func getAccountsInfo(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetAccountsInfo(guids: guids.joined(separator: ","), profileInfo: "1", mandant: "1"), withResponse: responseBlock)
    }

    func getAccountImage(guid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetAccountImage(accountGuid: guid), withResponse: responseBlock)
    }

    func setAutoGenerateConfirmReadMessage(enabled: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        do {
            let json = try ["confirmRead": enabled ? "1" : "0"].jsonString()

            self.sendCommand(DPAGServerFunction.SetAutoGeneratedMessages(data: json), withResponse: responseBlock)
        } catch {
            responseBlock(nil, nil, error.localizedDescription)
        }
    }

    func getAutoGeneratedMessages(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetAutoGeneratedMessages(), withResponse: responseBlock)
    }

    func getDevices(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ListDevice(), withResponse: responseBlock)
    }

    func deleteDevice(guid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.DeleteDevice(guid: guid), withResponse: responseBlock)
    }

    func renameDevice(guid: String, newName: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        if let newNameBase64 = newName.data(using: .utf8)?.base64EncodedString() {
            self.sendCommand(DPAGServerFunction.SetDeviceName(guid: guid, name: newNameBase64), withResponse: responseBlock)
        } else {
            responseBlock(nil, nil, nil)
        }
    }

    func setContact(contactAccountGuid: String, blocked: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetBlocked(guid: contactAccountGuid, blocked: blocked ? 1 : 0), withResponse: responseBlock)
    }

    func deleteAccount(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.DeleteAccount(), withResponse: responseBlock)
    }

    func isMessageSent(messageGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.IsMessageSend(senderId: messageGuid), withResponse: responseBlock)
    }

    func setChatDeleted(streamGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetChatDeleted(guid: streamGuid), withResponse: responseBlock)
    }

    func deleteTimedMessage(messageGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RemoveTimedMessage(guid: messageGuid), withResponse: responseBlock)
    }

    func deleteTimedMessages(messageGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RemoveTimedMessages(guids: messageGuids.joined(separator: ",")), withResponse: responseBlock)
    }

    func sendMessage(msgInstance: DPAGSendMessageWorkerInstance, concurrent _: Bool, requestInBackgroundId: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws {
        let checksum = try CryptoHelperCoding.shared.md5Hash(value: msgInstance.messageJson!)

        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequestSendMessages()
            autoreleasepool {
                request.parametersCodable = DPAGServerFunction.SendPrivateMessage(message: msgInstance.messageJson!, messageChecksum: checksum, returnConfirmMessage: 1)
                msgInstance.clearMessageJson()
            }
            request.responseBlock = responseBlock
            request.requestInBackgroundId = requestInBackgroundId

            return request
        }())
    }

    func sendTimedMessage(msgInstance: DPAGSendMessageWorkerInstance, sendTime: Date, concurrent _: Bool, requestInBackgroundId: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws {
        let checksum = try CryptoHelperCoding.shared.md5Hash(value: msgInstance.messageJson!)

        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequestSendMessages()
            autoreleasepool {
                request.parametersCodable = DPAGServerFunction.SendTimedPrivateMessage(message: msgInstance.messageJson!, messageChecksum: checksum, dateToSend: DPAGFormatter.dateServer.string(from: sendTime))
                msgInstance.clearMessageJson()
            }
            request.responseBlock = responseBlock
            request.requestInBackgroundId = requestInBackgroundId

            return request
        }())
    }

    func sendInternalMessage(messageJson: String, to _: SIMSContactIndexEntry, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws {
        let checksum = try CryptoHelperCoding.shared.md5Hash(value: messageJson)

        self.sendCommand(DPAGServerFunction.SendPrivateInternalMessage(message: messageJson, messageChecksum: checksum, returnConfirmMessage: 1), withResponse: responseBlock)
    }

    func sendInternalMessages(messageJsonsString: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws {
        let checksum = try CryptoHelperCoding.shared.md5Hash(value: messageJsonsString)

        self.sendCommand(DPAGServerFunction.SendPrivateInternalMessages(message: messageJsonsString, messageChecksum: checksum, returnConfirmMessage: 1), withResponse: responseBlock)
    }

    func sendGroupMessage(msgInstance: DPAGSendMessageWorkerInstance, concurrent _: Bool, requestInBackgroundId: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws {
        let checksum = try CryptoHelperCoding.shared.md5Hash(value: msgInstance.messageJson!)

        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequestSendMessages()
            autoreleasepool {
                request.parametersCodable = DPAGServerFunction.SendGroupMessage(message: msgInstance.messageJson!, messageChecksum: checksum, returnConfirmMessage: 1)
                msgInstance.clearMessageJson()
            }
            request.responseBlock = responseBlock
            request.requestInBackgroundId = requestInBackgroundId

            return request
        }())
    }

    func sendTimedGroupMessage(msgInstance: DPAGSendMessageWorkerInstance, sendTime: Date, concurrent _: Bool, requestInBackgroundId: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws {
        let checksum = try CryptoHelperCoding.shared.md5Hash(value: msgInstance.messageJson!)

        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequestSendMessages()
            autoreleasepool {
                request.parametersCodable = DPAGServerFunction.SendTimedGroupMessage(message: msgInstance.messageJson!, messageChecksum: checksum, dateToSend: DPAGFormatter.dateServer.string(from: sendTime))
                msgInstance.clearMessageJson()
            }
            request.responseBlock = responseBlock
            request.requestInBackgroundId = requestInBackgroundId

            return request
        }())
    }

    private func loadShareExtensionMessages() -> [[AnyHashable: Any]] {
        var retVal: [[AnyHashable: Any]] = []

        do {
            if let urlMetadataRoot = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: DPAGApplicationFacade.preferences.sharedContainerConfig.groupID) {
                try FileManager.default.contentsOfDirectory(at: urlMetadataRoot, includingPropertiesForKeys: nil, options: .skipsHiddenFiles).filter({ $0.pathExtension == "mmd" }).forEach({ fileURL in

                    do {
                        let data = try Data(contentsOf: fileURL)

                        guard let json = try JSONSerialization.jsonObject(with: data, options: []) as? [AnyHashable: Any] else {
                            return
                        }

                        retVal.append(json)
                    } catch {
                        DPAGLog(error, message: "error loadShareExtensionMessages")
                    }
                })
            }
        } catch {
            DPAGLog(error, message: "error loadShareExtensionMessages")
        }

        return retVal
    }

    private func cleanupShareExtensionMessages() {
        do {
            if let urlMetadataRoot = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: DPAGApplicationFacade.preferences.sharedContainerConfig.groupID) {
                try FileManager.default.contentsOfDirectory(at: urlMetadataRoot, includingPropertiesForKeys: nil, options: .skipsHiddenFiles).filter({ $0.pathExtension == "mmd" }).forEach({ fileURL in
                    try? FileManager.default.removeItem(at: fileURL)
                })
            }
        } catch {
            DPAGLog(error, message: "error cleanupShareExtensionMessages")
        }
    }

    func getNewMessages(withResponse responseBlock: DPAGServiceResponseBlock?, useLazy: Bool) -> URLSessionTask? {
        var cachedresultShareExtension: [[AnyHashable: Any]] = []

        DPAGFunctionsGlobal.synchronized(self) {
            cachedresultShareExtension = self.loadShareExtensionMessages()
        }

        /* if cachedresult.count > 0 && responseBlock != nil
         {
             responseBlock?(cachedresult, nil, nil)
             self.cleanupShareExtensionMessages()
             return nil
         } */

        var cachedresultBackground: [[AnyHashable: Any]] = []

        DPAGFunctionsGlobal.synchronized(self) {
            cachedresultBackground = self.loadBackgroundReceivedMessages()
        }

        if cachedresultShareExtension.count > 0 || cachedresultBackground.count > 0 {
            // Alle als Prefetched Speichern
            var cachedresult: [[AnyHashable: Any]] = []
            cachedresult.append(contentsOf: cachedresultShareExtension)
            cachedresult.append(contentsOf: cachedresultBackground)
            self.saveBackgroundReceivedMessages(array: cachedresult)
            self.cleanupShareExtensionMessages()
            // die Prio1 Nachrochten abholen (prefetched Nachrichten korrekt einsortieren
            let responseBlock: DPAGServiceResponseBlock = { [weak self] responseObject, errorCode, errorMessage in

                guard let strongSelf = self else {
                    return
                }

                if let errorMessage = errorMessage {
                    responseBlock?(nil, errorCode, errorMessage)
                } else if let responseArray = responseObject as? [Any] {
                    DPAGLog("Got Prio1 Messages")

                    var newArray: [[AnyHashable: Any]] = []

                    for messageObj in responseArray {
                        if let message = messageObj as? String {
                            if let m = strongSelf.getPrefetchedMessage(messageGuid: message) {
                                newArray.append(m)
                                DPAGLog("Has Messages \(newArray.count)")
                            }
                        } else if let message = messageObj as? [AnyHashable: Any] {
                            var response = message

                            response[DPAGStrings.JSON.MessagePrivate.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessagePrivate.OBJECT_KEY] as? [AnyHashable: Any])
                            response[DPAGStrings.JSON.MessagePrivateInternal.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessagePrivateInternal.OBJECT_KEY] as? [AnyHashable: Any])
                            response[DPAGStrings.JSON.MessageInternal.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageInternal.OBJECT_KEY] as? [AnyHashable: Any])
                            response[DPAGStrings.JSON.MessageGroupInvitation.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageGroupInvitation.OBJECT_KEY] as? [AnyHashable: Any])
                            response[DPAGStrings.JSON.MessageGroup.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageGroup.OBJECT_KEY] as? [AnyHashable: Any])
                            response[DPAGStrings.JSON.MessageChannel.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageChannel.OBJECT_KEY] as? [AnyHashable: Any])
                            response[DPAGStrings.JSON.MessageService.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageService.OBJECT_KEY] as? [AnyHashable: Any])
                            response[DPAGStrings.JSON.ConfirmMessageSend.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.ConfirmMessageSend.OBJECT_KEY] as? [AnyHashable: Any])

                            if response[DPAGStrings.JSON.MessagePrivate.OBJECT_KEY] != nil
                                || response[DPAGStrings.JSON.MessagePrivateInternal.OBJECT_KEY] != nil
                                || response[DPAGStrings.JSON.MessageInternal.OBJECT_KEY] != nil
                                || response[DPAGStrings.JSON.MessageGroupInvitation.OBJECT_KEY] != nil
                                || response[DPAGStrings.JSON.MessageGroup.OBJECT_KEY] != nil
                                || response[DPAGStrings.JSON.MessageChannel.OBJECT_KEY] != nil
                                || response[DPAGStrings.JSON.MessageService.OBJECT_KEY] != nil
                                || response[DPAGStrings.JSON.ConfirmMessageSend.OBJECT_KEY] != nil {
                                newArray.append(response)
                                DPAGLog("Has Messages \(newArray.count)")
                            }
                        }
                    }

                    self?.saveBackgroundReceivedMessages(array: [])
                    responseBlock?(newArray, errorCode, errorMessage)
                }
            }

            return DPAGApplicationFacade.service.perform(request: {
                let request = DPAGHttpServiceRequestGetMessages()
                request.parametersCodable = DPAGServerFunction.GetNewPrio1Messages(prefetchedMessages: self.getPrefetchedMessages().joined(separator: ","))
                request.responseBlock = responseBlock

                return request
            }())
        }

        if useLazy {
            return DPAGApplicationFacade.service.perform(request: {
                let request = DPAGHttpServiceRequestGetMessages()
                request.path = "LazyService"
                request.parametersCodable = DPAGServerFunction.GetNewMessages()
                request.responseBlock = responseBlock
                request.timeout = TimeInterval(DPAGApplicationFacade.preferences.lazyGetTimeout)

                return request
            }())
            // (forPath: "LazyService", parameters: parameters, authenticate: .standard, concurrent: true, response: responseBlock, timeout: TimeInterval(DPAGApplicationFacade.preferences.lazyGetTimeout), requestInBackgroundId : nil)
        } else {
            return DPAGApplicationFacade.service.perform(request: DPAGHttpServiceRequestGetMessages(parametersCodable: DPAGServerFunction.GetNewMessages(), responseBlock: responseBlock))
        }
    }

    enum DPAGServerMessageState: String {
        case metadataDownloaded,
            attachmentDownloaded,
            read,
            deleted,
            prefetched
    }

    func confirmDownload(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        if let guidsJson = guids.JSONString {
            DPAGApplicationFacade.service.perform(request: DPAGHttpServiceRequestGetMessages(parametersCodable: DPAGServerFunction.SetMessageState(state: DPAGServerMessageState.metadataDownloaded.rawValue, guids: guidsJson, chatGuid: nil), responseBlock: responseBlock))
        } else {
            DPAGLog("Guids could not be translated into JSON")
        }
    }

    func confirmAttachmentDownload(guids: [String], withResponse responseBlock: DPAGServiceResponseBlock?) {
        if let guidsJson = guids.JSONString {
            self.sendCommand(DPAGServerFunction.SetMessageState(state: DPAGServerMessageState.attachmentDownloaded.rawValue, guids: guidsJson, chatGuid: nil), withResponse: responseBlock)
        } else {
            DPAGLog("Guids could not be translated into JSON")
        }
    }

    func confirmRead(guids: [String], chatGuid: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        guard guids.count > 0 else {
            return
        }

        if let guidsJson = guids.JSONString {
            self.sendCommand(DPAGServerFunction.SetMessageState(state: DPAGServerMessageState.read.rawValue, guids: guidsJson, chatGuid: chatGuid), withResponse: responseBlock)
        } else {
            DPAGLog("Guids could not be translated into JSON")
        }
    }

    func confirmDeleted(guids: [String], withResponse responseBlock: DPAGServiceResponseBlock?) {
        guard guids.count > 0 else {
            return
        }

        if let guidsJson = guids.JSONString {
            self.sendCommand(DPAGServerFunction.SetMessageState(state: DPAGServerMessageState.deleted.rawValue, guids: guidsJson, chatGuid: nil), withResponse: responseBlock)
        } else {
            DPAGLog("Guids could not be translated into JSON")
        }
    }

    func setDeviceData() throws {
        guard let deviceDict = try self.devicesDAO.ownDeviceDictionary() else {
            DPAGLog("Cannot set device data because own device metadata is nil")
            return
        }

        if let deviceJson = deviceDict.JSONString {
            let checksum = try CryptoHelperCoding.shared.md5Hash(value: deviceJson)

            DPAGLog("setDeviceData: %@", deviceJson)

            let responseBlock: DPAGServiceResponseBlock = { responseObject, _, errorMessage in
                DPAGLog("setDeviceDataResponse: error: %@\nresponse: %@", errorMessage ?? "nix", (responseObject as AnyObject?)?.debugDescription ?? "garnix")
            }

            self.sendCommand(DPAGServerFunction.SetDeviceData(data: deviceJson, dataChecksum: checksum), withResponse: responseBlock)
        } else {
            DPAGLog("Cannot set device data because deviceJson is nil")
            return
        }
    }

    func setNotification(enable: Bool, forChatType type: DPAGNotificationChatType, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        let cmd: CodableDict

        switch type {
        case .single:
            cmd = DPAGServerFunction.SetNotification(enabled: enable ? 1 : 0)
        case .group:
            cmd = DPAGServerFunction.SetGroupNotification(enabled: enable ? 1 : 0)
        case .channel:
            cmd = DPAGServerFunction.SetChannelNotification(enabled: enable ? 1 : 0)
        case .service:
            cmd = DPAGServerFunction.SetServiceNotification(enabled: enable ? 1 : 0)
        }

        self.sendCommand(cmd, withResponse: responseBlock)
    }

    private struct SetNotificationSoundTypes: Codable {
        let privateMessage: String
        let groupMessage: String
        let channelMessage: String
        let serviceMessage: String
    }

    func setNotificationSound(enable: Bool, forChatType type: DPAGNotificationChatType, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        let notificationDict: SetNotificationSoundTypes
        let preferences = DPAGApplicationFacade.preferences

        switch type {
        case .single:

            notificationDict = SetNotificationSoundTypes(privateMessage: enable ? (preferences[DPAGPreferences.PropString.kChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault) : DPAGPreferences.kValueNotificationSoundNone, groupMessage: preferences[DPAGPreferences.PropString.kGroupChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault, channelMessage: preferences[DPAGPreferences.PropString.kChannelChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault, serviceMessage: preferences[DPAGPreferences.PropString.kServiceChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault)

        case .group:

            notificationDict = SetNotificationSoundTypes(privateMessage: preferences[DPAGPreferences.PropString.kChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault, groupMessage: enable ? (preferences[DPAGPreferences.PropString.kGroupChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault) : DPAGPreferences.kValueNotificationSoundNone, channelMessage: preferences[DPAGPreferences.PropString.kChannelChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault, serviceMessage: preferences[DPAGPreferences.PropString.kServiceChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault)

        case .channel:

            notificationDict = SetNotificationSoundTypes(privateMessage: preferences[DPAGPreferences.PropString.kChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault, groupMessage: preferences[DPAGPreferences.PropString.kGroupChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault, channelMessage: enable ? (preferences[DPAGPreferences.PropString.kChannelChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault) : DPAGPreferences.kValueNotificationSoundNone, serviceMessage: preferences[DPAGPreferences.PropString.kServiceChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault)

        case .service:

            notificationDict = SetNotificationSoundTypes(privateMessage: preferences[DPAGPreferences.PropString.kChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault, groupMessage: preferences[DPAGPreferences.PropString.kGroupChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault, channelMessage: preferences[DPAGPreferences.PropString.kChannelChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault, serviceMessage: enable ? (preferences[DPAGPreferences.PropString.kServiceChatRingtone] ?? DPAGPreferences.kValueNotificationSoundDefault) : DPAGPreferences.kValueNotificationSoundNone)
        }

        if let dataJson = try? JSONEncoder().encode(notificationDict), let dataStr = String(data: dataJson, encoding: .utf8) {
            self.sendCommand(DPAGServerFunction.SetNotificationSound(data: dataStr, enabled: enable ? 1 : 0), withResponse: responseBlock)
        } else {
            responseBlock(nil, nil, nil)
        }
    }

    func setChannelNotification(enable: Bool, forChannel channelGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetChannelNotificationForChannel(guid: channelGuid, enabled: enable ? 1 : 0), withResponse: responseBlock)
    }

    func setServiceNotification(enable: Bool, forService serviceGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetServiceNotificationForService(guid: serviceGuid, enabled: enable ? 1 : 0), withResponse: responseBlock)
    }

    func setBackgroundPushNotification(enable: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetNotificationWakeUpFlag(enabled: enable ? 1 : 0), withResponse: responseBlock)
    }

    func setPreviewPushNotification(enable: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetNotificationPreviewFlag(enabled: enable ? 1 : 0), withResponse: responseBlock)
    }

    func createGroup(withData roomData: String, addMembersJSON: String?, adminJSON: String?, nickNameEncoded _: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) throws {
        let checksum = try CryptoHelperCoding.shared.md5Hash(value: roomData)
        var checksumAddMembersJSON: String?
        if let addMembersJSON = addMembersJSON, addMembersJSON.isEmpty == false {
            checksumAddMembersJSON = try CryptoHelperCoding.shared.md5Hash(value: addMembersJSON)
        }
        var adminGuids: String?
        if (adminJSON?.isEmpty ?? true) == false {
            adminGuids = adminJSON
        }
        self.sendCommand(DPAGServerFunction.CreateGroup(groupData: roomData, groupDataChecksum: checksum, returnComplexResult: "1", addRoomMemberData: checksumAddMembersJSON != nil ? addMembersJSON : nil, addRoomMemberDataChecksum: checksumAddMembersJSON, makeAdminGuids: adminGuids), withResponse: responseBlock)
    }

    func updateGroup(groupGuid: String, data: String?, keyIV: String?, newMembersJSON: String?, removedMembers: [String], newAdmins: [String], removedAdmins: [String], nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.UpdateGroup(roomGuid: groupGuid, newMembers: newMembersJSON ?? "", removedMembers: removedMembers.count > 0 ? removedMembers.joined(separator: ",") : nil, newAdmins: newAdmins.count > 0 ? newAdmins.joined(separator: ",") : nil, removedAdmins: removedAdmins.count > 0 ? removedAdmins.joined(separator: ",") : nil, data: data, dataKeyIV: keyIV, nickName: nickName), withResponse: responseBlock)
    }

    func removeRoom(roomGuid: String, nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RemoveRoom(guid: roomGuid, nickName: nickName), withResponse: responseBlock)
    }

    func getRoom(roomGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetRoom(guid: roomGuid, checkReadonly: (DPAGApplicationFacade.cache.account?.isCompanyUserRestricted ?? false) ? "1" : "0"), withResponse: responseBlock)
    }

    func removeMember(accountGuid: String, fromRoom roomGuid: String, nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RemoveFromRoom(accountGuid: accountGuid, roomGuid: roomGuid, returnComplexResult: "1", nickName: nickName), withResponse: responseBlock)
    }

    func acceptInvitationForRoom(roomGuid: String, nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.AcceptRoomInvitation(guid: roomGuid, returnComplexResult: "1", nickName: nickName), withResponse: responseBlock)
    }

    func declineInvitationForRoom(roomGuid: String, nickNameEncoded nickName: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.DeclineRoomInvitation(guid: roomGuid, returnComplexResult: "1", nickName: nickName), withResponse: responseBlock)
    }

    func sendCrashReport(report: String, withResponse responseBlock: DPAGServiceResponseBlock?) {
        if let reportData = report.data(using: .utf8) {
            let report64 = reportData.base64EncodedString()

            DPAGApplicationFacade.service.perform(request: {
                let request = DPAGHttpServiceRequest()
                request.parametersCodable = DPAGServerFunction.SaveReport(data: report64)
                request.responseBlock = responseBlock
                request.path = kPathDiag
                request.authenticate = .none

                return request
            }())
        }
    }

    func getAttachment(guid: String, progress downloadProgressBlock: DPAGProgressBlock?, destination: @escaping ((_ targetPath: URL?, _ response: URLResponse?) -> URL), withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        DPAGApplicationFacade.service.performDownload(request: {
            let request = DPAGHttpServiceRequestAttachments()
            request.parametersCodable = DPAGServerFunction.GetAttachment(guid: guid)
            request.responseBlock = responseBlock
            request.requestInBackgroundId = guid
            request.downloadProgressBlock = downloadProgressBlock
            request.destination = destination

            return request
        }())
    }

    func isTrackingDisabled(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.IsTrackingDisabled(), withResponse: responseBlock)
    }

    func getConfigVersions(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetConfigVersions(), withResponse: responseBlock)
    }

    func getConfiguration(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetConfiguration(), withResponse: responseBlock)
    }

    func getClientConfiguration(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommandAnonymous(DPAGServerFunction.GetClientConfiguration(), withResponse: responseBlock)
    }

    func getCompanyInfo(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetCompany(), withResponse: responseBlock)
    }

    func getCompanyLayout(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetCompanyLayout(), withResponse: responseBlock)
    }

    func getCompanyLogo(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetCompanyLogo(), withResponse: responseBlock)
    }

    func getCompanyConfig(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetCompanyMdmConfig(), withResponse: responseBlock)
    }

    func verifyCompanyEmail(email: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ConfirmConfirmationMail(code: email, confirmMode: nil), withResponse: responseBlock)
    }

    func setCompanyRecoveryKey(recoveryKey: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetCompanyRecoveryKey(data: recoveryKey), withResponse: responseBlock)
    }

    func checkCompanyManagement(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.HasCompanyManagement(), withResponse: responseBlock)
    }

    func acceptCompanyManagement(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.AcceptCompanyManagement(), withResponse: responseBlock)
    }

    func declineCompanyManagement(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.DeclineCompanyManagement(), withResponse: responseBlock)
    }

    func requestCompanyRecoveryKey(recoveryKey: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        let requestPath = "BackgroundService"
        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequest()
            request.parametersCodable = DPAGServerFunction.RequestCompanyRecoveryKey(data: recoveryKey)
            request.responseBlock = responseBlock
            request.path = requestPath
            request.authenticate = .background

            return request
        }())
    }

    func resetBadge(withResponse response: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ResetBadge(), withResponse: response)
    }

    func createBackgroundAccessToken(withResponse response: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.CreateBackgroundAccessToken(), withResponse: response)
    }

    func logEvents(events: [[AnyHashable: Any]]) {
        if let eventData = events.JSONString {
            DPAGApplicationFacade.service.perform(request: {
                let request = DPAGHttpServiceRequest()
                request.parametersCodable = DPAGServerFunction.TrackEvents(guid: DPAGApplicationFacade.preferences.deviceTrackingGuid, data: eventData)
                request.responseBlock = nil
                request.path = kPathDiag
                request.authenticate = .none

                return request
            }())
        }
    }

    func getChannels(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetChannels(), withResponse: responseBlock)
    }

    func getChannelChecksum(channelGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetChannelChecksum(guid: channelGuid), withResponse: responseBlock)
    }

    func getChannelDetails(channelGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetChannelDetails(guid: channelGuid), withResponse: responseBlock)
    }

    func getChannelDetails(channelGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetChannelDetailsBatch(guids: channelGuids.joined(separator: ",")), withResponse: responseBlock)
    }

    func getChannelAsset(channelGuid: String, assetType: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetChannelAsset(guid: channelGuid, type: assetType, os: "ios", res: String(format: "%@", UIScreen.main.scale as NSNumber)), withResponse: responseBlock)
    }

    func getChannelAssets(channelAssets: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetChannelAssets(idents: channelAssets.joined(separator: ","), os: "ios", res: String(format: "%@", UIScreen.main.scale as NSNumber)), withResponse: responseBlock)
    }

    func subscribeChannel(channelGuid: String, filter: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SubscribeChannel(guid: channelGuid, filter: filter), withResponse: responseBlock)
    }

    func unsubscribeChannel(channelGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.UnsubscribeChannel(guid: channelGuid), withResponse: responseBlock)
    }

    func getChannelCategories(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetChannelCategories(), withResponse: responseBlock)
    }

    func getServices(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetServices(), withResponse: responseBlock)
    }

    func getServiceChecksum(serviceGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetServiceChecksum(guid: serviceGuid), withResponse: responseBlock)
    }

    func getServiceDetails(serviceGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetServiceDetails(guid: serviceGuid), withResponse: responseBlock)
    }

    func getServiceDetails(serviceGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetServiceDetailsBatch(guids: serviceGuids.joined(separator: ",")), withResponse: responseBlock)
    }

    func getServiceAsset(serviceGuid: String, assetType: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetServiceAsset(guid: serviceGuid, type: assetType, os: "ios", res: String(format: "%@", UIScreen.main.scale as NSNumber)), withResponse: responseBlock)
    }

    func getServiceAssets(serviceAssetIdents: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetServiceAssets(idents: serviceAssetIdents.joined(separator: ","), os: "ios", res: String(format: "%@", UIScreen.main.scale as NSNumber)), withResponse: responseBlock)
    }

    func subscribeService(serviceGuid: String, filter: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SubscribeService(guid: serviceGuid, filter: filter), withResponse: responseBlock)
    }

    func unsubscribeService(serviceGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.UnsubscribeService(guid: serviceGuid), withResponse: responseBlock)
    }

    func getInfoPages(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        let model = DPAGApplicationFacade.model

        self.sendCommand(DPAGServerFunction.GetInfoPages(version: model.appVersion ?? "notSet", os: "iOS", language: Bundle.main.preferredLocalizations.first ?? "de"), withResponse: responseBlock)
    }

    func getInfoPageData(pageGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetInfoPageData(guid: pageGuid), withResponse: responseBlock)
    }

    func createBackupPasstoken(accountGuid _: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.CreateBackupPasstoken(), withResponse: responseBlock)
    }

    func setFollowedChannels(channelInfos: [[AnyHashable: Any]], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        if let channelInfos = channelInfos.JSONString {
            self.sendCommand(DPAGServerFunction.SetFollowedChannels(data: channelInfos), withResponse: responseBlock)
        } else {
            responseBlock(nil, nil, nil)
        }
    }

    func setFollowedServices(serviceInfos: [[AnyHashable: Any]], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        if let serviceInfos = serviceInfos.JSONString {
            self.sendCommand(DPAGServerFunction.SetFollowedServices(data: serviceInfos), withResponse: responseBlock)
        } else {
            responseBlock(nil, nil, nil)
        }
    }

    func getBlocked(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetBlocked(), withResponse: responseBlock)
    }

    func getTimedMessageGuids(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetTimedMessageGuids(), withResponse: responseBlock)
    }

    func getTimedMessages(messageGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetTimedMessages(guids: messageGuids.joined(separator: ",")), withResponse: responseBlock)
    }

    func getCurrentRoomInfo(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetCurrentRoomInfo(), withResponse: responseBlock)
    }

    func getMandanten(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetMandanten(), withResponse: responseBlock)
    }

    func getPurchasedProducts(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetPurchasedProducts(), withResponse: responseBlock)
    }

    func registerVoucher(voucher: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RegisterVoucher(ident: voucher), withResponse: responseBlock)
    }

    func registerTestVoucher(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RegisterTestVoucher(), withResponse: responseBlock)
    }

    func getTestVoucherInfo(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetTestVoucherInfo(), withResponse: responseBlock)
    }

    func getProducts(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetProducts(), withResponse: responseBlock)
    }

    func registerPurchase(productId: String, andTransaction transaction: String?, andReceipt receipt: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RegisterPurchase(receipt: receipt, productId: productId, transactionId: transaction ?? ""), withResponse: responseBlock)
    }

    func checkMailAddress(eMailAddress: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommandAnonymous(DPAGServerFunction.ValidateMail(email: eMailAddress), withResponse: responseBlock)
    }

    func validateMailAddress(eMailAddress: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ValidateMail(email: eMailAddress), withResponse: responseBlock)
    }

    func requestConfirmationMail(eMailAddress: String, force: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RequestConfirmationMail(email: eMailAddress, language: Bundle.main.preferredLocalizations.first ?? "de", forceCreation: force ? 1 : 0, allowFreeMailer: 1), withResponse: responseBlock)
    }

    func confirmConfirmationMail(code: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ConfirmConfirmationMail(code: code, confirmMode: "newDeviceV1"), withResponse: responseBlock)
    }

    func requestConfirmationSMS(phoneNumber: String, force: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RequestConfirmPhone(phone: phoneNumber, language: Bundle.main.preferredLocalizations.first ?? "de", forceCreation: force ? 1 : 0), withResponse: responseBlock)
    }

    func confirmConfirmationSMS(code: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ConfirmConfirmPhone(code: code, confirmMode: "newDeviceV1"), withResponse: responseBlock)
    }

    func setAdressInformation(data: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetAdressInformation(data: data), withResponse: responseBlock)
    }

    func getAdressInformations(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetAdressInformations(), withResponse: responseBlock)
    }

    func getAdressInformationBatch(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetAdressInformationBatch(guids: guids.joined(separator: ",")), withResponse: responseBlock)
    }

    func getAdressInformationsCompany(withResponse responseBlock: @escaping DPAGServiceResponseBlock, since dateSince: Date) {
        let dateSinceStr = DPAGFormatter.date.string(from: dateSince)

        self.sendCommand(DPAGServerFunction.ListCompanyIndex(ifModifiedSince: dateSinceStr), withResponse: responseBlock)
    }

    func getAdressInformationsCompanyBatch(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetCompanyIndexEntries(guids: guids.joined(separator: ",")), withResponse: responseBlock)
    }

    func checkServiceAvailability(serviceID: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        responseBlock(nil, nil, nil)
    }

    func checkServiceAvailability(serviceID: String, zipCode: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        responseBlock(nil, nil, nil)
    }

    func setProfilInfo(nickname: String?, andStatus status: String?, andImage image: String?, oooStatus: String?, toAccounts accountGuids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetProfileInfo(nickname: nickname, status: status, image: image, oooStatus: oooStatus, informAccountGuids: accountGuids.count > 0 ? accountGuids.joined(separator: ",") : nil), withResponse: responseBlock)
    }

    func initialiseCoupling(transId: String, timestamp ts: String, tan: String, appData: String, signature sig: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.InitialiseCoupling(transId: transId, ts: ts, tan: tan, appData: appData, sig: sig), withResponse: responseBlock)
    }

    func cancelCoupling(transId: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.CancelCoupling(transId: transId), withResponse: responseBlock)
    }

    func getAccountInfoAnonymous(data: String, searchMode mode: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommandAnonymous(DPAGServerFunction.GetAccountInfoAnonymous(data: data, searchMode: mode), withResponse: responseBlock)
    }

    func requestCoupling(accountGuid: String, transId transaktionId: String, pubKey publicKey: String, encVrfy verifyData: String, reqType type: String, appData: String, signature sig: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommandAnonymous(DPAGServerFunction.RequestCoupling(accountGuid: accountGuid, transId: transaktionId, pubKey: publicKey, encVrfy: verifyData, reqType: type, appData: appData, sig: sig), withResponse: responseBlock)
    }

    func getCouplingRequest(transId: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetCouplingRequest(transId: transId), withResponse: responseBlock)
    }

    func responseCoupling(transId: String, device publicKey: String, devKeySig verifyData: String, key aesKey: String, keyIV aesKeyIV: String, encSyncData minibackup: String, appData: String, signature sig: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ResponseCoupling(transId: transId, device: publicKey, devKeySig: verifyData, kek: aesKey, kekIV: aesKeyIV, encSyncData: minibackup, appData: appData, sig: sig), withResponse: responseBlock)
    }

    func getCouplingResponse(accountGuid: String, transId transaktionId: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommandAnonymous(DPAGServerFunction.GetCouplingResponse(accountGuid: accountGuid, transId: transaktionId), withResponse: responseBlock)
    }

    func createAdditionalDevice(accountGuid: String, transId transaktionId: String, device metadata: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommandAnonymous(DPAGServerFunction.CreateAdditionalDevice(accountGuid: accountGuid, transId: transaktionId, device: metadata), withResponse: responseBlock)
    }

    func createShareExtensionDevice(accountGuid _: String, device metadata: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.CreateShareExtensionDevice(data: metadata, dataChecksum: metadata.md5()), withResponse: responseBlock)
    }

    func getMessages(guids: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetMessages(guids: guids), withResponse: responseBlock)
    }

    func setDeviceName(guid: String, deviceName deviceNameEncoded: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetDeviceName(guid: guid, name: deviceNameEncoded), withResponse: responseBlock)
    }

    func getTempDeviceInfo(accountGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetTempDeviceInfo(accountGuid: accountGuid), withResponse: responseBlock)
    }

    func setTempDeviceInfo(keys: String, createdAt createdAtString: String, nextUpdate nextUpdateString: String, sig signature: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetTempDeviceInfo(keys: keys, createdAt: createdAtString, nextUpdate: nextUpdateString, sig: signature), withResponse: responseBlock)
    }

    func getConfirmedIdentities(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetConfirmedIdentities(), withResponse: responseBlock)
    }

    func insUpdPrivateIndex(data: [String: String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequest()

            request.parameters = data
            request.parametersCodable = DPAGServerFunction.InsUpdPrivateIndexEntry()
            request.responseBlock = responseBlock

            return request
        }())
    }

    func listPrivateIndexEntries(ifModifiedSince: String?, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ListPrivateIndexEntries(ifModifiedSince: ifModifiedSince), withResponse: responseBlock)
    }

    func getPrivateIndexEntries(guids: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetPrivateIndexEntries(guids: guids), withResponse: responseBlock)
    }

    func deletePrivateIndexEntries(guids: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.DeletePrivateIndexEntries(guids: guids), withResponse: responseBlock)
    }

    func removeConfirmedEmailAddress(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RemoveConfirmedMail(), withResponse: responseBlock)
    }

    func removeConfirmedPhoneNumber(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RemoveConfirmedPhone(), withResponse: responseBlock)
    }

    func requestEncryptionInfo(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.RequestEncryptionInfo(), withResponse: responseBlock)
    }

    func setPublicOnlineState(enabled: Bool, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetPublicOnlineState(state: enabled ? "1" : "0"), withResponse: responseBlock)
    }

    func getPublicOnlineState(withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetPublicOnlineState(), withResponse: responseBlock)
    }

    func setIsWriting(accountGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetIsWriting(guid: accountGuid), withResponse: responseBlock)
    }

    func resetIsWriting(accountGuid: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.ResetIsWriting(guid: accountGuid), withResponse: responseBlock)
    }

    func getOnlineState(accountGuid: String, lastKnownState: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        let request = DPAGHttpServiceRequest()

        request.path = "LazyService"
        request.parametersCodable = DPAGServerFunction.GetOnlineState(guid: accountGuid, lastKnownState: lastKnownState)
        request.responseBlock = responseBlock
        request.timeout = TimeInterval(DPAGApplicationFacade.preferences.lazyGetTimeout)

        DPAGApplicationFacade.service.perform(request: request)
    }

    func getOnlineStateBatch(guids: [String], withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.GetOnlineStateBatch(guids: guids.joined(separator: ","), oooProfil: "1"), withResponse: responseBlock)
    }

    func setSilentSingleChat(accountGuid: String, till: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetSilentSingleChat(guid: accountGuid, till: till), withResponse: responseBlock)
    }

    func setSilentGroupChat(groupGuid: String, till: String, withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        self.sendCommand(DPAGServerFunction.SetSilentGroupChat(guid: groupGuid, till: till), withResponse: responseBlock)
    }

    private static var semaphore = false

    func fetchBackgroundMessage(messageGuid _: String, userInfo _: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        if DPAGApplicationFacade.preferences.backgroundAccessToken == nil || DPAGServerWorker.semaphore {
            if DPAGApplicationFacade.preferences.backgroundAccessToken == nil {
                DPAGLog("No BackgroudnAccessToken to load Messages")
            }
            completionHandler(UIBackgroundFetchResult.noData)
            return
        }
        let responseBlock: DPAGServiceResponseBlock = { [weak self] responseObject, _, errorMessage in
            defer {
                DPAGServerWorker.semaphore = false
            }
            guard let strongSelf = self else { return }
            if let errorMessage = errorMessage {
                DPAGLog(errorMessage)
                strongSelf.performBlockOnMainThread {
                    completionHandler(.newData)
                }
            } else if let responseArray = responseObject as? [Any] {
                DPAGLog("Got message in Background")
                var newArray: [[AnyHashable: Any]] = []
                var newArrayNotPrefetched: [[AnyHashable: Any]] = []
                strongSelf.queueBackgroundReceivedMessages.sync {
                    newArray.append(contentsOf: strongSelf.backgroundReceivedMessages)
                }
                for messageObj in responseArray {
                    if let message = messageObj as? String {
                        if let m = strongSelf.getPrefetchedMessage(messageGuid: message) {
                            newArray.append(m)
                            DPAGLog("Has Messages \(newArray.count)")
                        }
                    } else if let message = messageObj as? [AnyHashable: Any] {
                        var response = message
                        response[DPAGStrings.JSON.MessagePrivate.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessagePrivate.OBJECT_KEY] as? [AnyHashable: Any])
                        response[DPAGStrings.JSON.MessagePrivateInternal.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessagePrivateInternal.OBJECT_KEY] as? [AnyHashable: Any])
                        response[DPAGStrings.JSON.MessageInternal.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageInternal.OBJECT_KEY] as? [AnyHashable: Any])
                        response[DPAGStrings.JSON.MessageGroupInvitation.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageGroupInvitation.OBJECT_KEY] as? [AnyHashable: Any])
                        response[DPAGStrings.JSON.MessageGroup.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageGroup.OBJECT_KEY] as? [AnyHashable: Any])
                        response[DPAGStrings.JSON.MessageChannel.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageChannel.OBJECT_KEY] as? [AnyHashable: Any])
                        response[DPAGStrings.JSON.MessageService.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.MessageService.OBJECT_KEY] as? [AnyHashable: Any])
                        response[DPAGStrings.JSON.ConfirmMessageSend.OBJECT_KEY] = strongSelf.dictDownloaded(forDict: response[DPAGStrings.JSON.ConfirmMessageSend.OBJECT_KEY] as? [AnyHashable: Any])

                        if response[DPAGStrings.JSON.MessagePrivate.OBJECT_KEY] != nil
                            || response[DPAGStrings.JSON.MessagePrivateInternal.OBJECT_KEY] != nil
                            || response[DPAGStrings.JSON.MessageInternal.OBJECT_KEY] != nil
                            || response[DPAGStrings.JSON.MessageGroupInvitation.OBJECT_KEY] != nil
                            || response[DPAGStrings.JSON.MessageGroup.OBJECT_KEY] != nil
                            || response[DPAGStrings.JSON.MessageChannel.OBJECT_KEY] != nil
                            || response[DPAGStrings.JSON.MessageService.OBJECT_KEY] != nil
                            || response[DPAGStrings.JSON.ConfirmMessageSend.OBJECT_KEY] != nil {
                            newArray.append(response)
                            newArrayNotPrefetched.append(response)
                            DPAGLog("Has Messages \(newArray.count)")
                        }
                    }
                }
                strongSelf.saveBackgroundReceivedMessages(array: newArray)
                let requestPath = "BackgroundService"
                let responseBlock: DPAGServiceResponseBlock = { [weak self] _, _, _ in
                    self?.performBlockOnMainThread {
                        completionHandler(.newData)
                    }
                }
                DPAGApplicationFacade.service.perform(request: {
                    let request = DPAGHttpServiceRequest()
                    request.parametersCodable = DPAGServerFunction.SetMessageState(state: DPAGServerMessageState.prefetched.rawValue, guids: strongSelf.getPrefetchedMessages(forArray: newArrayNotPrefetched).JSONString ?? "", chatGuid: nil)
                    request.responseBlock = responseBlock
                    request.path = requestPath
                    request.authenticate = .background

                    return request
                }())
            }
        }
        DPAGServerWorker.semaphore = true
        let requestPath = "BackgroundService"
        DPAGApplicationFacade.service.perform(request: {
            let request = DPAGHttpServiceRequest()
            request.parametersCodable = DPAGServerFunction.GetNewPrio1Messages(prefetchedMessages: self.getPrefetchedMessages().joined(separator: ","))
            request.responseBlock = responseBlock
            request.path = requestPath
            request.authenticate = .background
            return request
        }())
    }

    private func dictDownloaded(forDict dict: [AnyHashable: Any]?) -> [AnyHashable: Any]? {
        guard var retVal = dict else {
            return nil
        }
        retVal[SIMS_DATEDOWNLOADED] = DPAGFormatter.date.string(from: Date())
        return retVal
    }

    var queueBackgroundReceivedMessages = DispatchQueue(label: "de.dpag.simsme.DPAGServerWorker.queueBackgroundReceivedMessages", qos: .default, attributes: .concurrent, autoreleaseFrequency: .inherit, target: nil)
    var backgroundReceivedMessages: [[AnyHashable: Any]] = []
    var backgroundReceivedMessagesLoaded = false

    private func loadBackgroundReceivedMessages() -> [[AnyHashable: Any]] {
        var retVal: [[AnyHashable: Any]] = []
        self.queueBackgroundReceivedMessages.sync(flags: .barrier) {
            if self.backgroundReceivedMessagesLoaded == false {
                if let path = DPAGConstantsGlobal.documentsDirectoryURL?.appendingPathComponent("backgroundReceivedMessages").appendingPathExtension("plist") {
                    if FileManager.default.fileExists(atPath: path.path) {
                        if let tempDict = NSKeyedUnarchiver.unarchiveObject(withFile: path.path) as? [AnyHashable: Any] {
                            if let backgroundReceivedMessagesFile = tempDict["backgroundReceivedMessages"] as? [[AnyHashable: Any]] {
                                self.backgroundReceivedMessages = backgroundReceivedMessagesFile
                            }
                        }
                    }
                    self.backgroundReceivedMessagesLoaded = true
                }
            }
            retVal = self.backgroundReceivedMessages
        }
        return retVal
    }

    private func saveBackgroundReceivedMessages(array: [[AnyHashable: Any]]) {
        self.queueBackgroundReceivedMessages.sync(flags: .barrier) {
            self.backgroundReceivedMessages = array
            if let path = DPAGConstantsGlobal.documentsDirectoryURL?.appendingPathComponent("backgroundReceivedMessages").appendingPathExtension("plist") {
                FileManager.default.createFile(atPath: path.path, contents: nil, attributes: nil)
                NSKeyedArchiver.archiveRootObject(["backgroundReceivedMessages": self.backgroundReceivedMessages], toFile: path.path)
            }
        }
    }

    private func getPrefetchedMessages(forArray array: [[AnyHashable: Any]]) -> [String] {
        var rc: [String] = []
        for message in array {
            if let obj = message[DPAGStrings.JSON.MessagePrivate.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
            if let obj = message[DPAGStrings.JSON.MessagePrivateInternal.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
            if let obj = message[DPAGStrings.JSON.MessageInternal.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
            if let obj = message[DPAGStrings.JSON.MessageGroupInvitation.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
            if let obj = message[DPAGStrings.JSON.MessageGroup.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
        }

        return rc
    }

    private func getPrefetchedMessages() -> [String] {
        var rc: [String] = []
        for message in self.loadBackgroundReceivedMessages() {
            if let obj = message[DPAGStrings.JSON.MessagePrivate.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
            if let obj = message[DPAGStrings.JSON.MessagePrivateInternal.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
            if let obj = message[DPAGStrings.JSON.MessageInternal.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
            if let obj = message[DPAGStrings.JSON.MessageGroupInvitation.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
            if let obj = message[DPAGStrings.JSON.MessageGroup.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String {
                rc.append(guid)
            }
        }
        return rc
    }

    private func getPrefetchedMessage(messageGuid: String) -> [AnyHashable: Any]? {
        var rc: [AnyHashable: Any]?
        let msgs = self.loadBackgroundReceivedMessages()
        for message in msgs {
            if let obj = message[DPAGStrings.JSON.MessagePrivate.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String, messageGuid == guid {
                rc = message
                break
            }
            if let obj = message[DPAGStrings.JSON.MessagePrivateInternal.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String, messageGuid == guid {
                rc = message
                break
            }
            if let obj = message[DPAGStrings.JSON.MessageInternal.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String, messageGuid == guid {
                rc = message
                break
            }
            if let obj = message[DPAGStrings.JSON.MessageGroupInvitation.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String, messageGuid == guid {
                rc = message
                break
            }
            if let obj = message[DPAGStrings.JSON.MessageGroup.OBJECT_KEY] as? [AnyHashable: Any], let guid = obj[SIMS_GUID] as? String, messageGuid == guid {
                rc = message
                break
            }
        }
        return rc
    }

    func handleEvents(forBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void) {
        DPAGApplicationFacade.service.handleEvents(forBackgroundURLSession: identifier, completionHandler: completionHandler)
    }

    func getAutoAttachment(guid: String, contentType: DPAGMessageContentType, progress downloadProgressBlock: DPAGProgressBlock?, destination: @escaping ((_ targetPath: URL?, _ response: URLResponse?) -> URL), withResponse responseBlock: @escaping DPAGServiceResponseBlock) {
        DPAGApplicationFacade.service.performDownload(request: {
            let request = DPAGHttpServiceRequestAttachments()
            request.parametersCodable = DPAGServerFunction.GetAttachment(guid: guid)
            request.responseBlock = responseBlock
            request.requestInBackgroundId = guid
            request.downloadProgressBlock = downloadProgressBlock
            request.destination = destination
            request.isAutoAttachmentDownload = true
            request.contentType = contentType
            return request
        }())
    }

    func setBrabblerSwitchState() {
        DPAGLog("Setting OptIn to accepted")
        self.sendCommand(DPAGServerFunction.SetBrabblerSwitchState(state: "auto"), withResponse: { (_, _, _) in
        })
    }
}
