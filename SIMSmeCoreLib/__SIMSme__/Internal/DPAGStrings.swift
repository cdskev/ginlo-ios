//
//  DPAGStrings.swift
//  SIMSmeCore
//
//  Created by RBU on 08.03.18.
//  Copyright Â© 2020 ginlo.net GmbH. All rights reserved.
//

import Foundation

protocol CodableDict {
    func dict() throws -> [String: Any]
}

extension CodableDict where Self: Encodable {
    func dict() throws -> [String: Any] { try DictionaryEncoder().encode(self) }
}

public enum DPAGServerCacheKey: String {
    case getConfiguration,
        getMandanten,
        getCompanyLayout,
        listPrivateIndex,
        listCompanyIndex,
        getConfirmedIdentities,
        getCompanyAppSettings,
        getChannels,
        getServices,
        getBlocked,
        getAutoGeneratedMessages,
        getPublicOnlineState
}

enum DPAGServerFunction {
    struct GetServerSalt: Codable, CodableDict { var cmd: String = "getServerSalt" }
    struct GetSimsmeRecoveryPublicKey: Codable, CodableDict { var cmd: String = "getSimsmeRecoveryPublicKey" }
    struct IsTrackingDisabled: Codable, CodableDict { var cmd: String = "isTrackingDisabled" }
    struct GetConfigVersions: Codable, CodableDict { var cmd: String = "getConfigVersions" }
    struct GetConfiguration: Codable, CodableDict { var cmd: String = "getConfiguration" }
    struct GetClientConfiguration: Codable, CodableDict { var cmd: String = "getClientConfiguration" }
    struct GetCompany: Codable, CodableDict { var cmd: String = "getCompany" }
    struct GetCompanyLayout: Codable, CodableDict { var cmd: String = "getCompanyLayout" }
    struct GetCompanyLogo: Codable, CodableDict { var cmd: String = "getCompanyLogo" }
    struct GetCompanyMdmConfig: Codable, CodableDict { var cmd: String = "getCompanyMdmConfig" }
    struct HasCompanyManagement: Codable, CodableDict { var cmd: String = "hasCompanyManagement" }
    struct AcceptCompanyManagement: Codable, CodableDict { var cmd: String = "acceptCompanyManagement" }
    struct DeclineCompanyManagement: Codable, CodableDict { var cmd: String = "declineCompanyManagement" }
    struct CreateBackgroundAccessToken: Codable, CodableDict { var cmd: String = "createBackgroundAccessToken" }
    struct ResetBadge: Codable, CodableDict { var cmd: String = "resetBadge" }
    struct GetChannels: Codable, CodableDict { var cmd: String = "getChannels" }
    struct GetChannelCategories: Codable, CodableDict { var cmd: String = "getCategories" }
    struct GetServices: Codable, CodableDict { var cmd: String = "getServices" }
    struct CreateBackupPasstoken: Codable, CodableDict { var cmd: String = "createBackupPasstoken" }
    struct GetBlocked: Codable, CodableDict { var cmd: String = "getBlocked" }
    struct GetTimedMessageGuids: Codable, CodableDict { var cmd: String = "getTimedMessageGuids" }
    struct GetCurrentRoomInfo: Codable, CodableDict { var cmd: String = "getCurrentRoomInfo" }
    struct GetMandanten: Codable, CodableDict { var cmd: String = "getMandanten" }
    struct GetPurchasedProducts: Codable, CodableDict { var cmd: String = "getPurchasedProducts" }
    struct RegisterTestVoucher: Codable, CodableDict { var cmd: String = "registerTestVoucher" }
    struct GetTestVoucherInfo: Codable, CodableDict { var cmd: String = "getTestVoucherInfo" }
    struct GetProducts: Codable, CodableDict { var cmd: String = "getProducts" }
    struct GetAdressInformations: Codable, CodableDict { var cmd: String = "getAdressInformations" }
    struct GetConfirmedIdentities: Codable, CodableDict { var cmd: String = "getConfirmedIdentities" }
    struct InsUpdPrivateIndexEntry: Codable, CodableDict { var cmd: String = "insUpdPrivateIndexEntry" }
    struct RemoveConfirmedMail: Codable, CodableDict { var cmd: String = "removeConfirmedMail" }
    struct RemoveConfirmedPhone: Codable, CodableDict { var cmd: String = "removeConfirmedPhone" }
    struct RequestEncryptionInfo: Codable, CodableDict { var cmd: String = "requestEncryptionInfo" }

    struct SendPrivateMessage: Codable, CodableDict {
        let cmd: String = "sendPrivateMessage"
        let message: String
        let messageChecksum: String
        let returnConfirmMessage: Int

        private enum CodingKeys: String, CodingKey {
            case cmd,
                message,
                messageChecksum = "message-checksum",
                returnConfirmMessage
        }
    }

    struct SendGroupMessage: Codable, CodableDict {
        let cmd: String = "sendGroupMessage"
        let message: String
        let messageChecksum: String
        let returnConfirmMessage: Int

        private enum CodingKeys: String, CodingKey {
            case cmd,
                message,
                messageChecksum = "message-checksum",
                returnConfirmMessage
        }
    }

    struct SendPrivateInternalMessage: Codable, CodableDict {
        let cmd: String = "sendPrivateInternalMessage"
        let message: String
        let messageChecksum: String
        let returnConfirmMessage: Int

        private enum CodingKeys: String, CodingKey {
            case cmd,
                message,
                messageChecksum = "message-checksum",
                returnConfirmMessage
        }
    }

    struct SendTimedPrivateMessage: Codable, CodableDict {
        let cmd: String = "sendTimedPrivateMessage"
        let message: String
        let messageChecksum: String
        let dateToSend: String

        private enum CodingKeys: String, CodingKey {
            case cmd,
                message,
                messageChecksum = "message-checksum",
                dateToSend
        }
    }

    struct SendTimedGroupMessage: Codable, CodableDict {
        let cmd: String = "sendTimedGroupMessage"
        let message: String
        let messageChecksum: String
        let dateToSend: String

        private enum CodingKeys: String, CodingKey {
            case cmd,
                message,
                messageChecksum = "message-checksum",
                dateToSend
        }
    }

    struct SendPrivateInternalMessages: Codable, CodableDict {
        let cmd: String = "sendPrivateInternalMessages"
        let message: String
        let messageChecksum: String
        let returnConfirmMessage: Int

        private enum CodingKeys: String, CodingKey {
            case cmd,
                message,
                messageChecksum = "message-checksum",
                returnConfirmMessage
        }
    }

    struct CreateAccount: Codable, CodableDict {
        let cmd: String = "CreateAccountEx"
        let language: String
        let data: String
        let dataChecksum: String
        let allowFreeMailer: Int
        let mandant: String?

        private enum CodingKeys: String, CodingKey {
            case cmd,
                language,
                data,
                dataChecksum = "data-checksum",
                allowFreeMailer,
                mandant
        }
    }

    struct CreateAutomaticAccount: Codable, CodableDict {
        let cmd: String = "CreateAccountEx"
        let language: String
        let data: String
        let dataChecksum: String
        let cockpitToken: String
        let cockpitData: String
        let mandant: String?

        private enum CodingKeys: String, CodingKey {
            case cmd,
                language,
                data,
                dataChecksum = "data-checksum",
                cockpitToken,
                cockpitData,
                mandant
        }
    }

    struct CreateDeviceInAccount: Codable, CodableDict {
        var cmd: String = "createDevice"
        let phoneNumber: String?
        let device: String
        let mandant: String?
    }

    struct ConfirmAccount: Codable, CodableDict {
        var cmd: String = "confirmAccountEx"
        let confirmationCode: String
    }

    struct IsConfirmationValid: Codable, CodableDict {
        var cmd: String = "isConfirmationValid"
        let confirmationCode: String
    }

    struct RequestSimsmeRecoveryKey: Codable, CodableDict {
        var cmd: String = "requestSimsmeRecoveryKey"
        let language: String
    }

    struct GetKnownAccountInfo: Codable, CodableDict {
        var cmd: String = "getKnownAccountInfo"
        let data: String
        let profileInfo: String
        let mandant: String
        let searchMode: String
    }

    struct GetKnownAccounts: Codable, CodableDict {
        let cmd: String = "getKnownAccounts"
        let salt: String
        let data: String
        let profileInfo: String
        let mandant: String
        let dataChecksum: String
        let searchMode: String

        private enum CodingKeys: String, CodingKey {
            case cmd,
                salt,
                data,
                profileInfo,
                mandant,
                dataChecksum = "data-checksum",
                searchMode
        }
    }

    struct GetAccountInfo: Codable, CodableDict {
        var cmd: String = "getAccountInfo"
        let accountGuid: String
        let profileInfo: String
        let mandant: String
        let checkReadonly: String
        let tempDevice: String
    }

    struct GetAccountsInfo: Codable, CodableDict {
        var cmd: String = "getAccountInfoBatch"
        let guids: String
        let profileInfo: String
        let mandant: String
    }

    struct GetAccountImage: Codable, CodableDict {
        var cmd: String = "getAccountImage"
        let accountGuid: String
    }

    struct SetAutoGeneratedMessages: Codable, CodableDict {
        var cmd: String = "setAutoGeneratedMessages"
        let data: String
    }

    struct GetAutoGeneratedMessages: Codable, CodableDict {
        var cmd: String = "getAutoGeneratedMessages"
    }

    struct ListDevice: Codable, CodableDict {
        var cmd: String = "listDevice"
    }

    struct DeleteDevice: Codable, CodableDict {
        var cmd: String = "deleteDevice"
        let guid: String
    }

    struct SetDeviceName: Codable, CodableDict {
        var cmd: String = "setDeviceName"
        let guid: String
        let name: String
    }

    struct SetBlocked: Codable, CodableDict {
        var cmd: String = "setBlocked"
        let guid: String
        let blocked: Int
    }

    struct DeleteAccount: Codable, CodableDict {
        var cmd: String = "deleteAccount"
    }

    struct IsMessageSend: Codable, CodableDict {
        var cmd: String = "isMessageSend"
        let senderId: String
    }

    struct SetChatDeleted: Codable, CodableDict {
        var cmd: String = "setChatDeleted"
        let guid: String
    }

    struct RemoveTimedMessage: Codable, CodableDict {
        var cmd: String = "removeTimedMessage"
        let guid: String
    }

    struct RemoveTimedMessages: Codable, CodableDict {
        var cmd: String = "removeTimedMessageBatch"
        let guids: String
    }

    struct GetNewMessages: Codable, CodableDict {
        var cmd: String = "getNewMessages"
    }

    struct SetMessageState: Codable, CodableDict {
        var cmd: String = "setMessageState"
        let state: String
        let guids: String
        let chatGuid: String?
    }

    struct SetDeviceData: Codable, CodableDict {
        let cmd: String = "setDeviceData"
        let data: String
        let dataChecksum: String

        private enum CodingKeys: String, CodingKey {
            case cmd,
                data,
                dataChecksum = "data-checksum"
        }
    }

    struct SetNotification: Codable, CodableDict {
        var cmd: String = "setNotification"
        let enabled: Int
    }

    struct SetGroupNotification: Codable, CodableDict {
        var cmd: String = "setGroupNotification"
        let enabled: Int
    }

    struct SetChannelNotification: Codable, CodableDict {
        var cmd: String = "setChannelNotification"
        let enabled: Int
    }

    struct SetServiceNotification: Codable, CodableDict {
        var cmd: String = "setServiceNotification"
        let enabled: Int
    }

    struct SetNotificationSound: Codable, CodableDict {
        var cmd: String = "setNotificationSound"
        let data: String
        let enabled: Int
    }

    struct SetChannelNotificationForChannel: Codable, CodableDict {
        var cmd: String = "setChannelNotificationForChannel"
        let guid: String
        let enabled: Int
    }

    struct SetServiceNotificationForService: Codable, CodableDict {
        var cmd: String = "setServiceNotificationForService"
        let guid: String
        let enabled: Int
    }

    struct SetNotificationWakeUpFlag: Codable, CodableDict {
        var cmd: String = "setNotificationWakeUpFlag"
        let enabled: Int
    }

    struct SetNotificationPreviewFlag: Codable, CodableDict {
        var cmd: String = "setNotificationPreviewFlag"
        let enabled: Int
    }

    struct CreateGroup: Codable, CodableDict {
        let cmd: String = "createGroup"
        let groupData: String
        let groupDataChecksum: String
        let returnComplexResult: String
        let addRoomMemberData: String?
        let addRoomMemberDataChecksum: String?
        let makeAdminGuids: String?

        private enum CodingKeys: String, CodingKey {
            case cmd,
                groupData,
                groupDataChecksum = "groupData-checksum",
                returnComplexResult,
                addRoomMemberData,
                addRoomMemberDataChecksum = "addRoomMember-checksum",
                makeAdminGuids
        }
    }

    struct UpdateGroup: Codable, CodableDict {
        let cmd: String = "updateGroup"
        let roomGuid: String
        let newMembers: String?
        let removedMembers: String?
        let newAdmins: String?
        let removedAdmins: String?
        let data: String?
        let dataKeyIV: String?
        let nickName: String?

        private enum CodingKeys: String, CodingKey {
            case cmd,
                roomGuid,
                newMembers,
                removedMembers,
                newAdmins,
                removedAdmins,
                data,
                dataKeyIV = "key-iv",
                nickName
        }
    }

    struct RemoveRoom: Codable, CodableDict {
        var cmd: String = "removeRoom"
        let guid: String
        let nickName: String?
    }

    struct GetRoom: Codable, CodableDict {
        var cmd: String = "getRoom"
        let guid: String
        let checkReadonly: String
    }

    struct RemoveFromRoom: Codable, CodableDict {
        var cmd: String = "removeFromRoom"
        let accountGuid: String
        let roomGuid: String
        let returnComplexResult: String
        let nickName: String?
    }

    struct AcceptRoomInvitation: Codable, CodableDict {
        var cmd: String = "acceptRoomInvitation"
        let guid: String
        let returnComplexResult: String
        let nickName: String?
    }

    struct DeclineRoomInvitation: Codable, CodableDict {
        var cmd: String = "declineRoomInvitation"
        let guid: String
        let returnComplexResult: String
        let nickName: String?
    }

    struct GetAttachment: Codable, CodableDict {
        var cmd: String = "getAttachment"
        let guid: String
    }

    struct SetCompanyRecoveryKey: Codable, CodableDict {
        var cmd: String = "setCompanyRecoveryKey"
        let data: String
    }

    struct RequestCompanyRecoveryKey: Codable, CodableDict {
        var cmd: String = "requestCompanyRecoveryKey"
        let data: String
    }

    struct TrackEvents: Codable, CodableDict {
        var cmd: String = "trackEvents"
        let guid: String
        let data: String
    }

    struct GetChannelChecksum: Codable, CodableDict {
        var cmd: String = "getChannelChecksum"
        let guid: String
    }

    struct GetChannelDetails: Codable, CodableDict {
        var cmd: String = "getChannelDetails"
        let guid: String
    }

    struct GetChannelDetailsBatch: Codable, CodableDict {
        var cmd: String = "getChannelDetailsBatch"
        let guids: String
    }

    struct GetChannelAsset: Codable, CodableDict {
        var cmd: String = "getChannelAsset"
        let guid: String
        let type: String
        let os: String
        let res: String
    }

    struct GetChannelAssets: Codable, CodableDict {
        var cmd: String = "getChannelAssetsBatch"
        let idents: String
        let os: String
        let res: String
    }

    struct SubscribeChannel: Codable, CodableDict {
        var cmd: String = "subscribeChannel"
        let guid: String
        let filter: String
    }

    struct UnsubscribeChannel: Codable, CodableDict {
        var cmd: String = "cancelChannelSubscription"
        let guid: String
    }

    struct GetServiceChecksum: Codable, CodableDict {
        var cmd: String = "getServiceChecksum"
        let guid: String
    }

    struct GetServiceDetails: Codable, CodableDict {
        var cmd: String = "getServiceDetails"
        let guid: String
    }

    struct GetServiceDetailsBatch: Codable, CodableDict {
        var cmd: String = "getServiceDetailsBatch"
        let guids: String
    }

    struct GetServiceAsset: Codable, CodableDict {
        var cmd: String = "getServiceAsset"
        let guid: String
        let type: String
        let os: String
        let res: String
    }

    struct GetServiceAssets: Codable, CodableDict {
        var cmd: String = "getServiceAssetsBatch"
        let idents: String
        let os: String
        let res: String
    }

    struct SubscribeService: Codable, CodableDict {
        var cmd: String = "subscribeService"
        let guid: String
        let filter: String
    }

    struct UnsubscribeService: Codable, CodableDict {
        var cmd: String = "cancelServiceSubscription"
        let guid: String
    }

    struct GetInfoPages: Codable, CodableDict {
        var cmd: String = "getInfoPages"
        let version: String
        let os: String
        let language: String
    }

    struct GetInfoPageData: Codable, CodableDict {
        var cmd: String = "getInfoPageData"
        let guid: String
    }

    struct SetFollowedChannels: Codable, CodableDict {
        var cmd: String = "setFollowedChannels"
        let data: String
    }

    struct SetFollowedServices: Codable, CodableDict {
        var cmd: String = "setFollowedServices"
        let data: String
    }

    struct GetTimedMessages: Codable, CodableDict {
        var cmd: String = "getTimedMessages"
        let guids: String
    }

    struct RegisterVoucher: Codable, CodableDict {
        var cmd: String = "registerVoucher"
        let ident: String
    }

    struct RegisterPurchase: Codable, CodableDict {
        var cmd: String = "registerPurchase"
        let receipt: String
        let productId: String
        let transactionId: String
    }

    struct ValidateMail: Codable, CodableDict {
        var cmd: String = "validateMail"
        let email: String
    }

    struct RequestConfirmationMail: Codable, CodableDict {
        var cmd: String = "requestConfirmationMail"
        let email: String
        let language: String
        let forceCreation: Int
        let allowFreeMailer: Int
    }

    struct ConfirmConfirmationMail: Codable, CodableDict {
        var cmd: String = "confirmConfirmationMail"
        let code: String
        let confirmMode: String?
    }

    struct RequestConfirmPhone: Codable, CodableDict {
        var cmd: String = "requestConfirmPhone"
        let phone: String
        let language: String
        let forceCreation: Int
    }

    struct ConfirmConfirmPhone: Codable, CodableDict {
        var cmd: String = "confirmConfirmPhone"
        let code: String
        let confirmMode: String?
    }

    struct SetAdressInformation: Codable, CodableDict {
        var cmd: String = "setAdressInformation"
        let data: String
    }

    struct GetAdressInformationBatch: Codable, CodableDict {
        var cmd: String = "getAdressInformationBatch"
        let guids: String
    }

    struct ListCompanyIndex: Codable, CodableDict {
        var cmd: String = "listCompanyIndex"
        let ifModifiedSince: String
    }

    struct GetCompanyIndexEntries: Codable, CodableDict {
        var cmd: String = "getCompanyIndexEntries"
        let guids: String
    }

    struct SetProfileInfo: Codable, CodableDict {
        var cmd: String = "setProfileInfo"
        let nickname: String?
        let status: String?
        let image: String?
        let oooStatus: String?
        let informAccountGuids: String?
    }

    struct InitialiseCoupling: Codable, CodableDict {
        var cmd: String = "initialiseCoupling"
        let transId: String
        let ts: String
        let tan: String
        let appData: String
        let sig: String
    }

    struct CancelCoupling: Codable, CodableDict {
        var cmd: String = "cancelCoupling"
        let transId: String
    }

    struct RequestCoupling: Codable, CodableDict {
        var cmd: String = "requestCoupling"
        let accountGuid: String
        let transId: String
        let pubKey: String
        let encVrfy: String
        let reqType: String
        let appData: String
        let sig: String
    }

    struct GetCouplingRequest: Codable, CodableDict {
        var cmd: String = "getCouplingRequest"
        let transId: String
    }

    struct ResponseCoupling: Codable, CodableDict {
        var cmd: String = "responseCoupling"
        let transId: String
        let device: String
        let devKeySig: String
        let kek: String
        let kekIV: String
        let encSyncData: String
        let appData: String
        let sig: String
    }

    struct GetCouplingResponse: Codable, CodableDict {
        var cmd: String = "getCouplingResponse"
        let accountGuid: String
        let transId: String
    }

    struct CreateAdditionalDevice: Codable, CodableDict {
        var cmd: String = "createAdditionalDevice"
        let accountGuid: String
        let transId: String
        let device: String
    }

    struct CreateShareExtensionDevice: Codable, CodableDict {
        let cmd: String = "createDevice"
        let data: String
        let dataChecksum: String

        private enum CodingKeys: String, CodingKey {
            case cmd,
                data,
                dataChecksum = "data-checksum"
        }
    }

    struct GetAccountInfoAnonymous: Codable, CodableDict {
        var cmd: String = "getAccountInfo"
        let data: String
        let searchMode: String
    }

    struct GetMessages: Codable, CodableDict {
        var cmd: String = "getMessages"
        let guids: String
    }

    struct GetTempDeviceInfo: Codable, CodableDict {
        var cmd: String = "getTempDeviceInfo"
        let accountGuid: String
    }

    struct SetTempDeviceInfo: Codable, CodableDict {
        var cmd: String = "setTempDeviceInfo"
        let keys: String
        let createdAt: String
        let nextUpdate: String
        let sig: String
    }

    struct ListPrivateIndexEntries: Codable, CodableDict {
        var cmd: String = "listPrivateIndexEntries"
        let ifModifiedSince: String?
    }

    struct GetPrivateIndexEntries: Codable, CodableDict {
        var cmd: String = "getPrivateIndexEntries"
        let guids: String
    }

    struct DeletePrivateIndexEntries: Codable, CodableDict {
        var cmd: String = "deletePrivateIndexEntries"
        let guids: String
    }

    struct SetPublicOnlineState: Codable, CodableDict {
        var cmd: String = "setPublicOnlineState"
        let state: String
    }

    struct GetPublicOnlineState: Codable, CodableDict { var cmd: String = "getPublicOnlineState" }

    struct SetIsWriting: Codable, CodableDict {
        var cmd: String = "setIsWriting"
        let guid: String
    }

    struct ResetIsWriting: Codable, CodableDict {
        var cmd: String = "resetIsWriting"
        let guid: String
    }

    struct GetOnlineState: Codable, CodableDict {
        var cmd: String = "getOnlineState"
        let guid: String
        let lastKnownState: String
    }

    struct GetOnlineStateBatch: Codable, CodableDict {
        var cmd: String = "getOnlineStateBatch"
        let guids: String
        let oooProfil: String
    }

    struct SetSilentSingleChat: Codable, CodableDict {
        var cmd: String = "setSilentSingleChat"
        let guid: String
        let till: String
    }

    struct SetSilentGroupChat: Codable, CodableDict {
        var cmd: String = "setSilentGroupChat"
        let guid: String
        let till: String
    }

    struct GetNewPrio1Messages: Codable, CodableDict {
        var cmd: String = "getNewPrio1Messages"
        let prefetchedMessages: String
    }
}

// swiftlint:disable nesting
public enum DPAGStrings {
    public static let WHITELABEL_MANDANT = "mandant"

    public static let SIMS_CHAT_BACKGROUND_IMAGE_PATH = "sims_chat_background_image_path"
    public static let SIMS_CHAT_BACKGROUND_IMAGE_PATH_LS = "sims_chat_background_image_path_ls"

    public enum CoreData {
        public enum Entities {
            public static let ACCOUNT = "SIMSAccount"
            public static let ACCOUNT_STATE_MESSAGE = "SIMSAccountStateMessage"

            public static let CHANNEL = "SIMSChannel"
            public static let CHANNEL_ASSET = "SIMSChannelAsset"
            public static let CHANNEL_OPTION = "SIMSChannelOption"
            public static let CHANNEL_OPTION_CHILDREN = "SIMSChannelOptionChildren"
            public static let CHANNEL_OPTION_TOGGLE = "SIMSChannelToggle"

            public static let CHECKSUM = "SIMSChecksum"

            public static let CONTACT_COMPANY = "SIMSCompanyContact"
            public static let CONTACT = "SIMSContact"
            public static let CONTACT_INDEX_ENTRY = "SIMSContactIndexEntry"

            public static let DEVICE = "SIMSDevice"

            public static let GROUP = "SIMSGroup"
            public static let GROUP_MEMBER = "SIMSGroupMember"

            public static let KEY = "SIMSKey"

            public static let MESSAGE = "SIMSMessage"
            public static let MESSAGE_CHANNEL = "SIMSMessageChannel"
            public static let MESSAGE_GROUP = "SIMSMessageGroup"
            public static let MESSAGE_PRIVATE_INTERNAL = "SIMSPrivateInternalMessage"
            public static let MESSAGE_PRIVATE = "SIMSMessagePrivate"
            public static let MESSAGE_SERVICE = "SIMSMessageService"

            public static let MESSAGE_TO_SEND = "SIMSMessageToSend"
            public static let MESSAGE_TO_SEND_GROUP = "SIMSMessageToSendGroup"
            public static let MESSAGE_TO_SEND_PRIVATE = "SIMSMessageToSendPrivate"

            public static let MESSAGE_RECEIVER = "SIMSMessageReceiver"

            public static let MESSAGE_SELF_DESTRUCT = "SIMSSelfDestructMessage"

            public static let SERVICE = "SIMSService"
            public static let SERVICE_ASSET = "SIMSServiceAsset"
            public static let SERVICE_OPTION = "SIMSServiceOption"
            public static let SERVICE_OPTION_CHILDREN = "SIMSServiceOptionChildren"
            public static let SERVICE_OPTION_TOGGLE = "SIMSServiceToggle"

            public static let STREAM = "SIMSMessageStream"
            public static let STREAM_CHANNEL = "SIMSMessageStreamChannel"
            public static let STREAM_GROUP = "SIMSMessageStreamGroup"
            public static let STREAM_PRIVATE = "SIMSMessageStreamPrivate"
            public static let STREAM_SERVICE = "SIMSMessageStreamService"
        }
    }

    public enum Server {
        public enum InfoPages {
            public enum Request {}

            public enum Response {
                public static let OBJECT_KEY = "InfoPage"
                public static let GUID = "guid"
                public static let IDENT = "ident"
                public static let CHECKSUM = "checksum"
                public static let LANGUAGE = "language"
                public static let APP_VERSION = "appVersion"
                public static let OS_IDENTIFIER = "os"
                public static let LAST_ONLINE = "lastOnline"
            }
        }

        public enum Group {
            public enum Request {
                public static let OBJECT_KEY = "ChatRoom"
                // As of Jan 2021, we have two group-types: "ChatRoom" and "AnnouncementRoom"
                // Checkout: https://github.com/ginlonet/ginlo-concepts/blob/develop/gep/gep-0003-readonly-groups.rst
                public static let OBJECT_KEY_ANNOUNCEMENT = "AnnouncementRoom"
                public static let GUID = "guid"
                public static let DATA = "data"
                public static let KEY_IV = "key-iv"
                public static let OWNER = "owner"
                public static let ROOM_TYPE = "roomtype"
                public static let GROUP_TYPE = "groupType"
            }

            public enum Response {
                public static let OBJECT_KEY = "ChatRoom"
                public static let OBJECT_KEY_MANAGED = "ManagedRoom"
                public static let OBJECT_KEY_RESTRICTED = "RestrictedRoom"
                public static let OBJECT_KEY_ANNOUNCEMENT = "AnnouncementRoom"
                public static let DATA = "data"
                public static let KEY_IV = "key-iv"
                public static let OWNER = "owner"
                public static let MEMBER = "member"
                public static let ADMINS = "admins"
                public static let WRITERS = "writers"
                public static let READONLY = "readOnly"
                public static let PUSH_SILENT_TILL = "pushSilentTill"
            }
        }

        public enum ProfilInfo {
            public static let PROFILE_INFO_RESULT = "ProfilInfoResult"
            public static let NOT_SEND = "not-send"

            public enum Response {
                public static let READONLY = "readOnly"
            }
        }

        public enum MessageInternal {
            public enum Request {}

            public enum Response {
                public static let GUID = "guid"
                public static let DATA = "data"
                public static let FROM = "from"
                public static let TO = "to"
                public static let DATE_SEND = "datesend"
                public static let FEATURES = "features"
            }
        }

        public enum MessageReceivedGroupInvitation {
            public enum Request {}

            public enum Response {
                public static let GUID = "guid"
                public static let DATA = "data"
                public static let DATE_SEND = "datesend"
                public static let DATE_DOWNLOADED = "datedownloaded"
                public static let FEATURES = "features"
                public static let ATTACHMENT = "attachment"
                public static let PUSH_INFO = "pushInfo"
                public static let FROM = "from"
                public static let TO = "to"
                public static let KEY = "key"
                public static let SIGNATURE = "signature"
                public static let GROUP_GUID = "GroupGuid"
                public static let GROUP_NAME = "GroupName"
                public static let GROUP_IMAGE = "GroupImage"
                public static let GROUP_TYPE = "GroupType"
                public static let ROOM_TYPE = "roomtype"
                public static let GROUP_AES_KEY = "GroupAesKey"
                public static let ENCRYPTED_DATA = "data"
                public static let ENCRYPTED_IV = "iv"
            }
        }

        public enum MessageReceivedPrivateInternalDecrypted {
            public enum Request {}

            public enum Response {
                public static let GUID = "guid"
                public static let CONTENT = "Content"
                public static let CONTENT_TYPE = "Content-Type"
                public static let CONTENT_TYPE_2 = "ContentType"

                public static let GROUP_GUID = "GroupGuid"

                public static let COMPANY_ENCRYPTION_SEED = "CompanyEncryptionSeed"
                public static let COMPANY_ENCRYPTION_SALT = "CompanyEncryptionSalt"
                public static let COMPANY_ENCRYPTION_DIFF = "CompanyEncryptionDiff"
                public static let COMPANY_ENCRYPTION_PARTS = "CompanyEncryptionKeyParts"
                public static let COMPANY_ENCRYPTION_PART_PHONE = "phone"
                public static let COMPANY_ENCRYPTION_PART_EMAIL = "email"
                public static let COMPANY_ENCRYPTION_PART_DIFF = "diff"

                public static let COMPANY_REQUEST_CONFIRM_PHONENUMBER = "RequestPhone"
                public static let COMPANY_REQUEST_CONFIRM_EMAILADDRESS = "RequestMail"
            }
        }

        public enum MessageReceivedReceiver {
            public enum Request {}

            public enum Response {
                public static let OBJECT_KEY = "Receiver"
            }
        }

        public enum MessageReceivedConfirmMessageSend {
            public enum Request {}

            public enum Response {
                public static let OBJECT_KEY = "ConfirmMessageSend"
            }
        }
    }

    public enum JSON {
        public enum Account {
            public static let OBJECT_KEY = "Account"
            public static let GUID = "guid"
            public static let ACCOUNT_ID = "accountID"
            public static let PUBLIC_KEY = "publicKey"
            public static let PHONE = "phone"
            public static let EMAIL = "email"
            public static let KEY_GUID = "keyGuid"
            public static let DATA = "data"

            public static let STATUS = "status"
            public static let NICKNAME = "nickname"
            public static let IMAGE_CHECKSUM = "image_checksum"
            public static let PUSH_SILENT_TILL = "pushSilentTill"
        }

        public enum Channel {
            public static let OBJECT_KEY_CHANNEL = "Channel"
            public static let OBJECT_KEY_SERVICE = "Service"

            public static let GUID = "guid"
            public static let DESC = "desc"
            public static let DESC_SHORT = "short_desc"
            public static let OPTIONS = "options"
            public static let AES_KEY = "aes_key"
            public static let IV = "iv"
            public static let CHECKSUM = "checksum"

            public static let SERVICE_ID = "serviceId"

            public static let LAYOUT = "layout"
            public static let LAYOUT_COLOR_LABEL_ENABLED = "color_label_enable"
            public static let LAYOUT_COLOR_LABEL_DISABLED = "color_label_disable"
            public static let LAYOUT_COLOR_TEXT = "color_text"

            public static let LINK_REPLACER = "shortLinkText"

            public static let PROMOTED = "promotion"
            public static let PROMOTED_CATEGORY = "@promotionCategories"
            public static let PROMOTED_CATEGORY_IDENT = "category"
            public static let PROMOTED_ENABLED = "enabled"
            public static let PROMOTED_EXTERNAL_URL = "externalUrl"

            public static let SEARCH_TEXT = "searchText"
            public static let WELCOME_TEXT = "welcomeText"
            public static let RECOMMENDATION_TEXT = "suggestionText"

            public static let FEEDBACK_CONTACT = "feedbackContact"
            public static let FEEDBACK_CONTACT_NICKNAME = "nickname"
            public static let FEEDBACK_CONTACT_PHONENUMBER = "phoneNumber"

            public static let SECTION = "Section"
        }

        public enum ChannelOption {
            public static let TYPE = "type"
            public static let IDENT = "ident"
            public static let LABEL = "label"
            public static let LABEL_SUB = "label_sub"
            public static let DEFAULT_VALUE = "default"
            public static let SUBITEMS = "@items"

            public static let TYPE_TOGGLE = "toggle"
        }

        public enum ChannelOptionToggle {
            public static let FILTER_STATE_ON = "filter_on"
            public static let FILTER_STATE_OFF = "filter_off"
            public static let CHILDREN_TOGGLE_STATE = "forToggle"
            public static let CHILDREN = "@children"
        }

        public enum Company {
            public static let OBJECT_KEY = "Company"
        }

        public enum ConfirmMessageSend {
            public static let OBJECT_KEY = "ConfirmMessageSend"
        }

        public enum Device {
            public static let OBJECT_KEY = "Device"
            public static let GUID = "guid"
            public static let ACCOUNT_GUID = "accountGuid"
            public static let PUBLIC_KEY = "publicKey"
            public static let PK_SIGN = "pkSign"
            public static let PASSTOKEN = "passtoken"
            public static let LANGUAGE = "language"
            public static let APN_IDENTIFIER = "apnIdentifier"
            public static let APP_NAME = "appName"
            public static let APP_VERSION = "appVersion"
            public static let OS_IDENTIFIER = "os"
            public static let KEY_GUID = "keyGuid"
            public static let DATA = "data"
            public static let FEATURES = "features"
            public static let DEVICE_NAME = "deviceName"
            public static let DEVICE_TYPE = "deviceTyp"
            public static let LAST_ONLINE = "lastOnline"
        }

        public enum Group {
            public static let GROUP_NAME = "GroupName"
            public static let GROUP_IMAGE = "GroupImage"
            public static let ROOM_TYPE = "roomtype"
            public static let GROUP_TYPE = "groupType"
        }

        public enum Key {
            public static let OBJECT_KEY = "Key"
            public static let GUID = "guid"
            public static let ACCOUNT_GUID = "accountGuid"
            public static let DEVICE_GUID = "deviceGuid"
            public static let DATA = "data"
        }

        public enum Location {
            public static let ADDRESS = "address"
            public static let LONGITUDE = "longitude"
            public static let LATITUDE = "latitude"
            public static let PREVIEW = "preview"
        }

        public enum Message {
            public enum ContentType {
                public static let SUFFIX_SELF_DESTRUCTIVE = "/selfdest"
                public static let SUFFIX_CITATION = "/citation"

                public static let INTERNAL = "internal"
                public static let PLAIN = "text/plain"
                public static let AV_CALL_INVITATION = "text/x-ginlo-call-invite"
                public static let CONTROL_MSG_NG = "application/x-ginlo-control-message"
                public static let IMAGE = "image/jpeg"
                public static let VIDEO = "video/mpeg"
                public static let LOCATION = "model/location"
                public static let CONTACT = "text/x-vcard"
                public static let VOICEREC = "audio/mpeg"
                public static let FILE = "application/octetstream"
                public static let TEXT_RSS = "text/rss"

                public static let INVITATION = "model/invitation"
                public static let GROUP_IMAGE = "groupimage/jpeg"
                public static let GROUP_NAME = "model/groupname"
                public static let STATUS = "text/status"
                public static let NICKNAME = "text/nickname"
                public static let COMPANY_ENCRYPTION_INFO = "company/encryptionInfo"
                public static let COMPANY_REQUEST_CONFIRM_PHONE = "company/requestConfirmPhone"
                public static let COMPANY_REQUEST_CONFIRM_EMAIL = "company/requestConfirmationMail"
                public static let OOO_STATUS_MESSAGE = "account/oooStatus"
            }

            public enum AdditionalData {
                public static let FILE_NAME = "Filename"
                public static let FILE_SIZE = "Filesize"
                public static let FILE_TYPE = "Filetype"
                public static let ENCODING_VERSION = "encodingVersion"
            }

            public static let TYPE = "messageType"
            public static let SENDER_ID = "senderId"
            public static let PRIORITY = "importance"

            public static let CONTENT = "Content"
            public static let CONTENT_DESCRIPTION = "Content-Desc"
            public static let NICKNAME = "Nickname"
            public static let PHONE = "Phone"
            public static let CONTENT_TYPE = "Content-Type"
            public static let CONTENT_TYPE_2 = "ContentType"

            public static let VCARDACCOUNTGUID = "accountGuid"
            public static let VCARDACCOUNTID = "accountID"

            public static let DESTRUCTION_COUNTDOWN = "DestructionCountDown"
            public static let DESTRUCTION_DATE = "DestructionDate"

            public static let IMAGE_PREVIEW = "ImagePreview"

            public static let ACCOUNT_PROFIL_KEY = "Profil-Key"

            public enum ImagePreview {
                public static let CONTENT = DPAGStrings.JSON.Message.CONTENT
            }
        }

        public enum MessageCitation {
            public static let OBJECT_KEY = "PrivateMessage"

            public static let TO_GUID = "toGuid"
            public static let FROM_GUID = "fromGuid"
            public static let MSG_GUID = "msgGuid"

            public static let CONTENT = DPAGStrings.JSON.Message.CONTENT
            public static let CONTENT_DESCRIPTION = DPAGStrings.JSON.Message.CONTENT_DESCRIPTION
            public static let NICKNAME = DPAGStrings.JSON.Message.NICKNAME
            public static let CONTENT_TYPE = DPAGStrings.JSON.Message.CONTENT_TYPE
        }

        public enum MessagePrivate {
            public static let OBJECT_KEY = "PrivateMessage"
        }

        public enum MessagePrivateInternal {
            public static let OBJECT_KEY = "PrivateInternalMessage"

            public static let CONTENT = DPAGStrings.JSON.Message.CONTENT
            public static let CONTENT_TYPE = DPAGStrings.JSON.Message.CONTENT_TYPE

            public enum ContentType {
                public static let NEW_GROUP_MEMBERS = "model/newmembers"
                public static let REMOVED_GROUP_MEMBERS = "model/removedmembers"
                public static let IMAGE = "image/jpeg"
                public static let GROUP_IMAGE = "groupimage/jpeg"
                public static let GROUP_NAME = "model/groupname"
                public static let STATUS = "text/status"
                public static let NICKNAME = "text/nickname"
            }

            public static let GROUP_GUID = DPAGStrings.JSON.MessageInternal.Data.GROUP_GUID
        }

        public enum MessageInternal {
            public static let OBJECT_KEY = "InternalMessage"

            public enum ObjectKey {
                public static let NEW_GROUP_MEMBERS = "model/newmembers"
                public static let NEW_GROUP_MEMBER = "model/newmember"
                public static let REMOVED_GROUP_MEMBERS = "model/removedmembers"
                public static let INIVITED_GROUP_MEMBERS = "model/invitemembers"
                public static let GROUP_ADMINS_REVOKED = "model/revokeadmins"
                public static let GROUP_ADMINS_GRANTED = "model/newadmins"
                public static let PROFILE_INFO_RESULT = "ProfilInfoResult"
                public static let GROUP_INFO_RESULT = "GroupInfoResult"
                public static let GROUP_ADD_MEMBERS_RESULT = "AddMembersResult"
                public static let GROUP_REMOVE_MEMBERS_RESULT = "RemoveMembersResult"
            }

            public enum GroupInfoResult {
                public static let NOT_SEND_GUIDS_ARRAY = "not-send"
            }

            public enum GroupAddMembersResult {
                public static let NOT_SEND_GUIDS_ARRAY = "not-send"
            }

            public enum GroupRemoveMembersResult {
                public static let NOT_SEND_GUIDS_ARRAY = "not-send"
            }

            fileprivate enum Data {
                fileprivate static let GROUP_GUID = "GroupGuid"
                fileprivate static let SENDER_GUID = "SenderGuid"
                fileprivate static let CONTENT = DPAGStrings.JSON.Message.CONTENT
                fileprivate static let SENDER_NICK = "NickName"
            }

            public enum DataGroupMembersNew {
                public static let GROUP_GUID = DPAGStrings.JSON.MessageInternal.Data.GROUP_GUID
                public static let SENDER_GUID = DPAGStrings.JSON.MessageInternal.Data.SENDER_GUID
                public static let CONTENT = DPAGStrings.JSON.MessageInternal.Data.CONTENT
                public static let SENDER_NICK = DPAGStrings.JSON.MessageInternal.Data.SENDER_NICK
            }

            public enum DataGroupMembersRemoved {
                public static let GROUP_GUID = DPAGStrings.JSON.MessageInternal.Data.GROUP_GUID
                public static let SENDER_GUID = DPAGStrings.JSON.MessageInternal.Data.SENDER_GUID
                public static let CONTENT = DPAGStrings.JSON.MessageInternal.Data.CONTENT
                public static let SENDER_NICK = DPAGStrings.JSON.MessageInternal.Data.SENDER_NICK
            }

            public enum DataGroupMembersInvited {
                public static let GROUP_GUID = DPAGStrings.JSON.MessageInternal.Data.GROUP_GUID
                public static let SENDER_GUID = DPAGStrings.JSON.MessageInternal.Data.SENDER_GUID
                public static let CONTENT = DPAGStrings.JSON.MessageInternal.Data.CONTENT
                public static let SENDER_NICK = DPAGStrings.JSON.MessageInternal.Data.SENDER_NICK
            }

            public enum DataGroupAdminsGranted {
                public static let GROUP_GUID = DPAGStrings.JSON.MessageInternal.Data.GROUP_GUID
                public static let SENDER_GUID = DPAGStrings.JSON.MessageInternal.Data.SENDER_GUID
                public static let CONTENT = DPAGStrings.JSON.MessageInternal.Data.CONTENT
                public static let SENDER_NICK = DPAGStrings.JSON.MessageInternal.Data.SENDER_NICK
            }

            public enum DataGroupAdminsRevoked {
                public static let GROUP_GUID = DPAGStrings.JSON.MessageInternal.Data.GROUP_GUID
                public static let SENDER_GUID = DPAGStrings.JSON.MessageInternal.Data.SENDER_GUID
                public static let CONTENT = DPAGStrings.JSON.MessageInternal.Data.CONTENT
                public static let SENDER_NICK = DPAGStrings.JSON.MessageInternal.Data.SENDER_NICK
            }
        }

        public enum MessageGroup {
            public static let OBJECT_KEY = "GroupMessage"
        }

        public enum MessageGroupInvitation {
            public static let OBJECT_KEY = "GroupInvMessage"

            public static let GROUP_GUID = "GroupGuid"
            public static let GROUP_NAME = "GroupName"
        }

        public enum MessageChannel {
            public static let OBJECT_KEY = "ChannelMessage"
        }

        public enum MessageService {
            public static let OBJECT_KEY = "ServiceMessage"
        }

        public enum MessageReceivedPrivate {
            public static let PRIORITY = "importance"
        }
    }

    public enum Notification {
        public enum CompanyAdressbookWorker {
            public static let SyncInfo = NSNotification.Name("DPAGCompanyAdressbookWorkerSyncInfoNotification")

            public static let SyncInfoKeyState = "State"
            public static let SyncInfoKeyProgressStep = "ProgressStep"
            public static let SyncInfoKeyProgressMax = "ProgressMax"
        }

        public enum UpdateKnownContactsWorker {
            public static let SyncInfo = NSNotification.Name("DPAGUpdateKnownContactsWorkerSyncInfoNotification")

            public static let SyncInfoKeyState = "State"
            public static let SyncInfoKeyProgressStep = "ProgressStep"
            public static let SyncInfoKeyProgressMax = "ProgressMax"
        }

        public enum Application {
            public static let WILL_RESIGN_ACTIVE: NSNotification.Name = NSNotification.Name("app_will_resign_active")
            public static let DID_ENTER_BACKGROUND: NSNotification.Name = NSNotification.Name("app_did_enter_background")
            public static let WILL_ENTER_FOREGROUND: NSNotification.Name = NSNotification.Name("app_will_enter_foreground")
            public static let DID_BECOME_ACTIVE: NSNotification.Name = NSNotification.Name("app_did_enter_foreground")

            public static let UI_IS_READY_WITH_PRIVATE_KEY: NSNotification.Name = NSNotification.Name("DocWallet_NOTIFICATION_APP_UI_IS_READY_WITH_PRIVATE_KEY")

            public static let SECURITY_RESET_APP: NSNotification.Name = NSNotification.Name("SIMSme_NOTIFICATION_SECURITY_RESET_APP")

            public static let DESIGN_COLORS_UPDATED: NSNotification.Name = NSNotification.Name("SIMSme_NOTIFICATION_DESIGN_COLORS_UPDATED")
            public static let DESIGN_LOGO_UPDATED: NSNotification.Name = NSNotification.Name("SIMSme_NOTIFICATION_DESIGN_LOGO_UPDATED")

            public static let TEST_APPLICATION_DAYS_CHANGED: NSNotification.Name = NSNotification.Name("SIMSme_TEST_APPLICATION_DAYS_CHANGED")

            public static let PUSH_LOCAL_MESSAGE: NSNotification.Name = NSNotification.Name("SIMSme_NOTIFICATION_PUSH_LOCAL_MESSAGE")
            public static let PUSH_LOCAL_MESSAGE__USERINFO_KEY__CONTENT: String = "SIMSme_NOTIFICATION_PUSH_LOCAL_MESSAGE__USERINFO_KEY__CONTENT"
            public static let PUSH_LOCAL_MESSAGE__USERINFO_KEY__CONTENTKEY: String = "SIMSme_NOTIFICATION_PUSH_LOCAL_MESSAGE__USERINFO_KEY__CONTENTKEY"
            public static let PUSH_LOCAL_MESSAGE__USERINFO_KEY__CONTENTDESC: String = "SIMSme_NOTIFICATION_PUSH_LOCAL_MESSAGE__USERINFO_KEY__CONTENTDESC"
            public static let PUSH_LOCAL_MESSAGE__USERINFO_KEY__NICKNAME: String = "SIMSme_NOTIFICATION_PUSH_LOCAL_MESSAGE__USERINFO_KEY__NICKNAME"
            public static let PUSH_LOCAL_MESSAGE__USERINFO_KEY__CONTENTTYPE: String = "SIMSme_NOTIFICATION_PUSH_LOCAL_MESSAGE__USERINFO_KEY__CONTENTTYPE"
            public static let PUSH_LOCAL_MESSAGE__USERINFO_KEY__MESSAGETYPE: String = "SIMSme_NOTIFICATION_PUSH_LOCAL_MESSAGE__USERINFO_KEY__MESSAGETYPE"
            public static let PUSH_LOCAL_MESSAGE__USERINFO_KEY__USERINFO: String = "SIMSme_NOTIFICATION_PUSH_LOCAL_MESSAGE__USERINFO_KEY__USERINFO"

            public static let DID_COMPLETE_LOGIN: NSNotification.Name = NSNotification.Name("SIMSme_DID_COMPLETE_LOGIN")
            public static let DID_HIDE_LOGIN: NSNotification.Name = NSNotification.Name("SIMSme_DID_HIDE_LOGIN")
            public static let PERFORM_TASKS_ON_APP_START: NSNotification.Name = NSNotification.Name("SIMSme_PERFORM_TASKS_ON_APP_START")

            public static let RESET_DATES: NSNotification.Name = NSNotification.Name("SIMSme_RESET_DATES")
            public static let FORCE_NOTIFICATION_UPDATE: NSNotification.Name = NSNotification.Name("FORCE_NOTIFICATION_UPDATE")
        }

        public enum Account {
            public static let IMAGE_CHANGED: NSNotification.Name = NSNotification.Name("account_image_changed")

            public static let CONFIRMED_IDENTITIES_CHANGED: NSNotification.Name = NSNotification.Name("account_confirmed_identities_changed")

            public static let WAS_DELETED: NSNotification.Name = NSNotification.Name("account_was_deleted")

            public static let SHOW_DELETE_PROFILE_VC: NSNotification.Name = NSNotification.Name("SIMS_NOTE_SHOW_DELETE_PROFILE_VC")
        }

        public enum ChatList {
            public static let NEEDS_UPDATE: NSNotification.Name = NSNotification.Name("chatlist_needs_update")
        }

        public enum ChatStream {
            public static let NEEDS_UPDATE: NSNotification.Name = NSNotification.Name("chatstream_needs_update")
            public static let NEEDS_UPDATE_META: NSNotification.Name = NSNotification.Name("chatstream_needs_update_meta")
            public static let NEEDS_UPDATE__USERINFO_KEY__STREAM_GUID = "chatstream_needs_update__stream_guid"
            public static let NEEDS_UPDATE__USERINFO_KEY__PUSH_SILENT_TILL = "chatstream_needs_update__push_silent_till"

            public static let NOTIFICATION_SOUND_CHANGED: NSNotification.Name = NSNotification.Name("NOTIFICATION_SOUND_CHANGED")
            public static let NOTIFICATION_SOUND_CHANGED__USERINFO_KEY__CHAT_TYPE = "NOTIFICATION_SOUND_CHANGED__USERINFO_KEY__CHAT_TYPE"
        }

        public enum Channel {
            public static let WAS_DELETED: NSNotification.Name = NSNotification.Name("note_channel_was_deleted")
            public static let WAS_DELETED__USERINFO_KEY__CHANNEL_GUID = "note_channel_was_deleted__channel_guid"
        }

        public enum Contact {
            public static let CHANGED: NSNotification.Name = NSNotification.Name("note_contact_changed")
            public static let CHANGED__USERINFO_KEY__CONTACT_GUID = "contactGuid"
            public static let LRU_ADDED_PRIVATE: NSNotification.Name = NSNotification.Name("note_contact_lru_added_private")
            public static let LRU_ADDED_COMPANY: NSNotification.Name = NSNotification.Name("note_contact_lru_added_company")
            public static let LRU_ADDED_DOMAIN: NSNotification.Name = NSNotification.Name("note_contact_lru_added_domain")
            public static let CONTACT_COUNT_CHANGED: NSNotification.Name = NSNotification.Name("note_contact_count_changed")
        }

        public enum Group {
            public static let CHANGED: NSNotification.Name = NSNotification.Name("note_group_changed")
            public static let CHANGED__USERINFO_KEY__GROUP_GUID = "groupGuid"

            public static let CONFIDENCE_UPDATED: NSNotification.Name = NSNotification.Name("group_confidence_updated")
            public static let CONFIDENCE_UPDATED__USERINFO_KEY__GROUP_GUID = "confidenceStatusGroupNewGuid"
            public static let CONFIDENCE_UPDATED__USERINFO_KEY__NEW_STATE = "confidenceStatusGroupNew"

            public static let WAS_DELETED: NSNotification.Name = NSNotification.Name("note_group_was_deleted")
            public static let WAS_DELETED__USERINFO_KEY__GROUP_GUID = "note_group_was_deleted__group_guid"
        }

        public enum ReceivingNewMessages {
            public static let STARTED: NSNotification.Name = NSNotification.Name("note_receiving_new_messages_started")
            public static let FINISHED: NSNotification.Name = NSNotification.Name("note_receiving_new_messages_finished")
            public static let FAILED: NSNotification.Name = NSNotification.Name("note_receiving_new_messages_failed")
        }

        public enum ContactsSync {
            public static let STARTED: NSNotification.Name = NSNotification.Name("contacts_sync_started")
            public static let FINISHED: NSNotification.Name = NSNotification.Name("contacts_sync_finished")
            public static let FAILED: NSNotification.Name = NSNotification.Name("contacts_sync_failed")
        }

        public enum Menu {
            public static let MENU_SHOW_CHATSTREAM: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MENU_SHOW_CHATSTREAM")
            public static let MENU_SHOW_CHATS: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MENU_SHOW_CHATS")
            public static let MENU_SHOW_PROFILE: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MENU_SHOW_PROFILE")
            public static let MENU_SHOW_CONTACTS: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MENU_SHOW_CONTACTS")
            public static let MENU_SHOW_FILES: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MENU_SHOW_FILES")
            public static let MENU_SHOW_DEVICES: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MENU_SHOW_DEVICES")
            public static let MENU_SHOW_SETTINGS: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MENU_SHOW_SETTINGS")
            public static let MENU_SHOW_CHANNELS: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MENU_SHOW_CHANNELS")
            public static let MENU_SHOW_INFO: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MENU_SHOW_INFO")

            public static let MENU_SHOW_CHATS__USERINFO_KEY__NEXT_VC = "SIMS_NOTE_MENU_SHOW_CHATS__USERINFO_KEY__NEXT_VC"
            public static let MENU_SHOW_CHATS__USERINFO_KEY__CONTACT_GUID = "SIMS_NOTE_MENU_SHOW_CHATS__USERINFO_KEY__CONTACT_GUID"
            public static let MENU_SHOW_CHATS__USERINFO_KEY__FILE_URL = "SIMS_NOTE_MENU_SHOW_CHATS__USERINFO_KEY__FILE_URL"

            public static let MENU_SHOW_CHATSTREAM__USERINFO_KEY__STREAM_GUID = "SIMS_NOTE_MENU_SHOW_CHATSTREAM__USERINFO_KEY__STREAM_GUID"
            public static let MENU_SHOW_CHATSTREAM__USERINFO_KEY__WITH_UNCONFIRMED_CONTACT = "SIMS_NOTE_MENU_SHOW_CHATSTREAM__USERINFO_KEY__WITH_UNCONFIRMED_CONTACT"

            public static let MENU_SHOW_EMAILADDRESS_ASK_AFTER_INSTALL: NSNotification.Name = NSNotification.Name("SIMSME_NOTE_MENU_SHOW_EMAILADDRESS_ASK_AFTER_INSTALL")

            public static let MENU_NEW_REINIT: NSNotification.Name = NSNotification.Name("SIMSme_NOTE_MENU_NEW_REINIT")
        }

        public enum Message {
            public static let METADATA_UPDATED: NSNotification.Name = NSNotification.Name("SIMS_NOTE_MESSAGE_METADATA_UPDATED")
            public static let METADATA_UPDATED__USERINFO_KEY__MESSAGE_GUID = "SIMS_NOTE_MESSAGE_METADATA_UPDATED__USERINFO_KEY_MESSAGEGUID"
        }

        public enum Push {
            public static let TOKEN_FAILED: NSNotification.Name = NSNotification.Name("push_registraiton_failed")
            public static let TOKEN_POSTPONED: NSNotification.Name = NSNotification.Name("push_registraiton_postponed")
            public static let NEW_MESSAGES: NSNotification.Name = NSNotification.Name("simsme://getNewMessages")
            public static let PURCHASES: NSNotification.Name = NSNotification.Name("simsme://purchases")
        }

        public enum Licence {
            public static let LICENCE_UPDATE_TESTLICENCE_DATE: NSNotification.Name = NSNotification.Name("SIMSME_NOTE_LICENCE_UPDATE_TESTLICENCE_DATE")
        }
    }

    public enum URLHandler {
        public static let HOST_ACCOUNT = "account"
        public static let KEY_CONFIRM = "confirm"

        public static let HOST_MESSAGE = "message"
        public static let KEY_MESSAGE_TEXT = "text"

        public static let HOST_CONTACT = "contact"
        public static let KEY_CONTACT_PHONENUM = "phone"
        public static let KEY_CONTACT_COUNTRY_CODE = "prefix"
        public static let KEY_CONTACT_EMAIL_ADDRESS = "email"
        public static let KEY_CONTACT_SIMSMEID = "simsmeid"
        public static let KEY_CONTACT_GINLOID = "ginloid"

        public static let HOST_CHANNEL = "channel"
        public static let PATH_CHANNEL_ADD = "/add"
        public static let KEY_CHANNEL = "channel"

        public static let HOST_SERVICE = "service"
        public static let PATH_SERVICE_ADD = "/add"
        public static let KEY_SERVICE = "service"
        
        public static let HOST_INVITE = "invite"
    }

    public enum ErrorCode {
        public static let GROUP_DELETED = "service.ERR-0101"
        public static let NO_MEMBER_OF_CHAT_ROOM = "service.ERR-0079"
        public static let GUID_UNKNOWN = "service.ERR-0026"
    }
}

// swiftlint:enable nesting

let SIMS_DATA = "data"
let SIMS_FEATURES = "features"
let SIMS_FORCE_CREATION = "forceCreation"
let SIMS_DATA_CHECKSUM = "data-checksum"
let SIMS_CHECKSUM = "checksum"
let SIMS_GUID = "guid"
let SIMS_GUIDS = "guids"
let SIMS_PHONE = "phone"
let SIMS_ACCOUNT_ID = "accountID"
let SIMS_FROM = "from"
let SIMS_NICKNAME = "nickname"
let SIMS_TO = "to"
let SIMS_DATESEND = "datesend"
let SIMS_SENDGUID = "sendGuid"
let SIMS_ATTACHMENT = "attachment"
let SIMS_TEMP_DEVICE = "tempDevice"
let SIMS_KEY = "key"
let SIMS_KEY_2 = "key2"
let SIMS_KEY_2_IV = "key2-iv"
let SIMS_HASHES = "hashes"
let SIMS_HASHES_256 = "hashes-sha256"
let SIMS_SIGNATURE = "signature"
let SIMS_SIGNATURE_256 = "signature-sha256"
let SIMS_SIGNATURE_TEMP_256 = "signature-temp256"
let SIMS_SIGNATURE_TEMP_DEVICE = "signature-tempdevice"
let SIMS_TYPE = "messageType"

let SIMS_PUBLIC_KEY = "publicKey"
let SIMS_PRIVATE_KEY = "privateKey"

let SIMS_DATEDOWNLOADED = "datedownloaded"

let FILEHELPER_FILE_NAME_DATABASE = "SIMSme.sqlite"
